/*
Navicat MySQL Data Transfer

Source Server         : server
Source Server Version : 50733
Source Host           : 121.37.208.86:3306
Source Database       : zmblog

Target Server Type    : MYSQL
Target Server Version : 50733
File Encoding         : 65001

Date: 2022-08-17 21:08:52
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `hibernate_sequence`
-- ----------------------------
DROP TABLE IF EXISTS `hibernate_sequence`;
CREATE TABLE `hibernate_sequence` (
  `next_val` bigint(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of hibernate_sequence
-- ----------------------------
INSERT INTO `hibernate_sequence` VALUES ('252');
INSERT INTO `hibernate_sequence` VALUES ('252');
INSERT INTO `hibernate_sequence` VALUES ('252');
INSERT INTO `hibernate_sequence` VALUES ('252');
INSERT INTO `hibernate_sequence` VALUES ('252');

-- ----------------------------
-- Table structure for `t_comment`
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `detail_id` bigint(20) DEFAULT NULL,
  `parent_comment_id` bigint(20) DEFAULT NULL,
  `admin_comment` bit(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKh6wr3psgnncfdi62idek9lj12` (`detail_id`),
  KEY `FK4jj284r3pb7japogvo6h72q95` (`parent_comment_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES ('199', '/img/avatar.png', '1', '2022-04-30 13:28:26', '123@qq.com', '1', '174', null, '');
INSERT INTO `t_comment` VALUES ('243', '/img/avatar.png', '233', '2022-08-14 23:43:11', '1@1', 'Zm-Mmm233', '230', null, '');
INSERT INTO `t_comment` VALUES ('244', 'https://tse4-mm.cn.bing.net/th/id/OIP-C.8PeAI7IEDhyg9O6scRH5aAAAAA?w=190&h=209&c=7&r=0&o=5&dpr=1.25&pid=1.7', '这啥\n', '2022-08-15 09:09:13', '1301770062@qq.com', 'StayNaughty', '230', null, '');
INSERT INTO `t_comment` VALUES ('202', '/img/avatar.png', 'gg', '2022-06-29 20:37:31', '123@wq', '13', '174', '200', '');
INSERT INTO `t_comment` VALUES ('229', 'https://img1.baidu.com/it/u=1016138010,1907110459&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500', '666', '2022-08-08 19:51:59', '1456133139@qq.com', 'Zm-Mmm', '223', null, '');
INSERT INTO `t_comment` VALUES ('227', 'https://img1.baidu.com/it/u=2029513305,2137933177&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto?sec=1659978000&t=c0e939e6643a00f94ac07c20860d004c', '666', '2022-08-08 09:27:27', '1301770062@qq.com', 'StayNaughty', '226', null, '');
INSERT INTO `t_comment` VALUES ('228', '/img/avatar.png', '1', '2022-08-08 19:50:36', '1@1', '1', '216', null, '');
INSERT INTO `t_comment` VALUES ('237', 'https://tse4-mm.cn.bing.net/th/id/OIP-C.8PeAI7IEDhyg9O6scRH5aAAAAA?w=190&h=209&c=7&r=0&o=5&dpr=1.25&pid=1.7', '666', '2022-08-12 20:17:19', '1301770062@qq.com', 'StayNaughty', '127', null, '');
INSERT INTO `t_comment` VALUES ('238', 'https://img1.baidu.com/it/u=1908708385,646906125&fm=253&fmt=auto&app=138&f=JPEG?w=400&h=400', '233', '2022-08-14 20:39:23', '1456133139@qq.com', 'Zm-Mmm', '216', null, '');
INSERT INTO `t_comment` VALUES ('246', 'https://tse4-mm.cn.bing.net/th/id/OIP-C.8PeAI7IEDhyg9O6scRH5aAAAAA?w=190&h=209&c=7&r=0&o=5&dpr=1.25&pid=1.7', '我萝莉呢？\n', '2022-08-15 09:57:25', '1301770062@qq.com', 'StayNaughty', '245', null, '');
INSERT INTO `t_comment` VALUES ('247', 'https://img1.baidu.com/it/u=1908708385,646906125&fm=253&fmt=auto&app=138&f=JPEG?w=400&h=400', '笑嘻了', '2022-08-15 10:15:14', '1456133139@qq.com', 'Zm-Mmm', '245', null, '');

-- ----------------------------
-- Table structure for `t_detail`
-- ----------------------------
DROP TABLE IF EXISTS `t_detail`;
CREATE TABLE `t_detail` (
  `id` bigint(20) NOT NULL,
  `appreciation` bit(1) NOT NULL,
  `comment` bit(1) NOT NULL,
  `content` longtext,
  `create_time` datetime DEFAULT NULL,
  `first_picture` varchar(255) DEFAULT NULL,
  `flag` varchar(255) DEFAULT NULL,
  `published` bit(1) NOT NULL,
  `recommend` bit(1) NOT NULL,
  `share_statement` bit(1) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `views` int(11) DEFAULT NULL,
  `type_id` bigint(20) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKj0k9bo8cpd3hys3ka2ane9wis` (`type_id`),
  KEY `FKbuwn6fdbwphkgnuw9x9podllq` (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_detail
-- ----------------------------
INSERT INTO `t_detail` VALUES ('94', '', '', '```java\r\npackage com.util;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MessageDigestAlgorithm {\r\n\r\n    public static String code(String str){\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MessageDigestAlgorithm\");\r\n            md.update(str.getBytes());\r\n            byte[]byteDigest = md.digest();\r\n            int i;\r\n            StringBuffer buf = new StringBuffer(\"\");\r\n            for (int offset = 0; offset < byteDigest.length; offset++) {\r\n                i = byteDigest[offset];\r\n                if (i < 0)\r\n                    i += 256;\r\n                if (i < 16)\r\n                    buf.append(\"0\");\r\n                buf.append(Integer.toHexString(i));\r\n            }\r\n            //32位加密\r\n            return buf.toString();\r\n            // 16位的加密\r\n            //return buf.toString().substring(8, 24);\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n```', '2020-07-07 14:30:28', 'https://p0.ssl.img.360kuai.com/t01d316080036698774.webp', '原创', '', '', '', 'MD5加密源码', '2022-08-10 17:20:47', '57', '140', '1', '在开发过程中，避免不了要涉及到数据加密，比如用户账号密码的加密，用户敏感数据的加密，涉及到的加密算法种类繁多，作为拿来主义的开发者时间精力有限，能够清楚其中主流的加密算法和用途，就已经足够了。');
INSERT INTO `t_detail` VALUES ('127', '', '', '```java\r\npackage com.util;\r\n\r\nimport org.commonmark.Extension;\r\nimport org.commonmark.ext.gfm.tables.TableBlock;\r\nimport org.commonmark.ext.gfm.tables.TablesExtension;\r\nimport org.commonmark.ext.heading.anchor.HeadingAnchorExtension;\r\nimport org.commonmark.node.Link;\r\nimport org.commonmark.node.Node;\r\nimport org.commonmark.parser.Parser;\r\nimport org.commonmark.renderer.html.AttributeProvider;\r\nimport org.commonmark.renderer.html.AttributeProviderContext;\r\nimport org.commonmark.renderer.html.AttributeProviderFactory;\r\nimport org.commonmark.renderer.html.HtmlRenderer;\r\n\r\nimport java.util.*;\r\n\r\npublic class Markdown {\r\n\r\n    /**\r\n     * markdown格式转换成HTML格式\r\n     * @param markdown\r\n     * @return\r\n     */\r\n    public static String markdownToHtml(String markdown) {\r\n        Parser parser = Parser.builder().build();\r\n        Node document = parser.parse(markdown);\r\n        HtmlRenderer renderer = HtmlRenderer.builder().build();\r\n        return renderer.render(document);\r\n    }\r\n\r\n    /**\r\n     * 增加扩展[标题锚点，表格生成]\r\n     * Markdown转换成HTML\r\n     * @param markdown\r\n     * @return\r\n     */\r\n    public static String markdownToHtmlExtensions(String markdown) {\r\n        //h标题生成id\r\n        Set<Extension> headingAnchorExtensions = Collections.singleton(HeadingAnchorExtension.create());\r\n        //转换table的HTML\r\n        List<Extension> tableExtension = Arrays.asList(TablesExtension.create());\r\n        Parser parser = Parser.builder()\r\n                .extensions(tableExtension)\r\n                .build();\r\n        Node document = parser.parse(markdown);\r\n        HtmlRenderer renderer = HtmlRenderer.builder()\r\n                .extensions(headingAnchorExtensions)\r\n                .extensions(tableExtension)\r\n                .attributeProviderFactory(new AttributeProviderFactory() {\r\n                    public AttributeProvider create(AttributeProviderContext context) {\r\n                        return new CustomAttributeProvider();\r\n                    }\r\n                })\r\n                .build();\r\n        return renderer.render(document);\r\n    }\r\n\r\n    /**\r\n     * 处理标签的属性\r\n     */\r\n    static class CustomAttributeProvider implements AttributeProvider {\r\n        @Override\r\n        public void setAttributes(Node node, String tagName, Map<String, String> attributes) {\r\n            //改变a标签的target属性为_blank\r\n            if (node instanceof Link) {\r\n                attributes.put(\"target\", \"_blank\");\r\n            }\r\n            if (node instanceof TableBlock) {\r\n                attributes.put(\"class\", \"ui celled table\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```', '2020-07-08 16:19:51', 'https://pic1.zhimg.com/80/v2-07153671b36b2d0e8b8ade5163f3fb00_720w.png', '转载', '', '', '', 'MarkDown格式转换', '2022-08-10 17:20:41', '83', '140', '1', 'Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\r\n\r\nMarkdown具有一系列衍生版本，用于扩展Markdown的功能(如表格、脚注、内嵌HTML等等)');
INSERT INTO `t_detail` VALUES ('174', '', '', '### 1. 长度限制\r\n```javascript\r\n<script language=\"javascript\">\r\n	function test() {\r\n		if (document.a.b.value.length > 50) {\r\n			alert(\"不能超过50个字符！\");\r\n			document.a.b.focus();\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 2. 只能是汉字\r\n```javascript\r\n<script language=\"javascript\">\r\n	function isChinese(obj) {\r\n		var reg = /^[\\u0391-\\uFFE5]+$/;\r\n		if (obj != \"\" && !reg.test(obj)) {\r\n			alert(\'必须输入中文！\');\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 3. 只能是英文字母\r\n```javascript\r\n<script type=\"text/javascript\">\r\n	//验证只能是字母\r\n	function checkZm(zm) {\r\n		var zmReg = /^[a-zA-Z]*$/;\r\n		if (zm != \"\" && !zmReg.test(zm)) {\r\n			alert(\"只能是英文字母！\");\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 4. 只能是数字\r\n```javascript\r\n<script language=javascript>\r\n	//验证只能为数字 \r\n	function checkNumber(obj) {\r\n		var reg = /^[0-9]+$/;\r\n		if (obj != \"\" && !reg.test(obj)) {\r\n			alert(\'只能输入数字！\');\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 5. 只能是英文字母和数字\r\n```javascript\r\n<script type=\"text/javascript\">\r\n	//验证只能是字母和数字 \r\n	function checkZmOrNum(zmnum) {\r\n		var zmnumReg = /^[0-9a-zA-Z]*$/;\r\n		if (zmnum != \"\" && !zmnumReg.test(zmnum)) {\r\n			alert(\"只能输入是字母或者数字,请重新输入\");\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 6. 检验时间大小(与当前时间比较)\r\n```javascript\r\n<script type=\"text/javascript\">\r\n	//检验时间大小(与当前时间比较) \r\n	function checkDate(obj) {\r\n		var obj_value = obj.replace(/-/g, \"/\"); //替换字符，变成标准格式(检验格式为：\'2009-12-10\') \r\n		// var obj_value=obj.replace(\"-\",\"/\");//替换字符，变成标准格式(检验格式为：\'2010-12-10 11:12\') \r\n		var date1 = new Date(Date.parse(obj_value));\r\n		var date2 = new Date(); //取今天的日期 \r\n		if (date1 > date2) {\r\n			alert(\"不能大于当前时间！\");\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 7. 屏蔽关键字(这里屏蔽\\*\\*\\*和\\*\\*\\*\\*)\r\n```javascript\r\n<script type=\"text/javascript\">\r\n	function test(obj) {\r\n		if ((obj.indexOf(\"***\") == 0) || (obj.indexOf(\"****\") == 0)) {\r\n			alert(\"屏蔽关键字(这里屏蔽***和****)！\");\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 8. 两次输入密码是否相同\r\n```javascript\r\n<script type=\"text/javascript\">\r\n	function check() {\r\n		with(document.all) {\r\n			if (input1.value != input2.value) {\r\n				alert(\"密码不一致\")\r\n				input1.value = \"\";\r\n				input2.value = \"\";\r\n			} else {\r\n				alert(\"密码一致\");\r\n				document.forms[0].submit();\r\n			}\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 9. 表单项不能为空\r\n```javascript\r\n<script language=\"javascript\">\r\n	function CheckForm(obj) {\r\n		if (obj.length == 0) {\r\n			alert(\"姓名不能为空!\");\r\n			return false;\r\n		}\r\n		return true;\r\n		alert(\"姓名不能为空!\");\r\n	}\r\n</script>\r\n```\r\n### 10. 邮箱验证\r\n```javascript\r\n<script language=\"javascript\">\r\n	function test(obj) {\r\n		//对电子邮件的验证\r\n		var myreg = /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/;\r\n		if (!myreg.test(obj)) {\r\n			alert(\'请输入有效的邮箱！\');\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 11. 验证手机号\r\n```javascript\r\n<script type=\"text/javascript\">\r\n	function validatemobile(mobile) {\r\n		if (mobile.length == 0) {\r\n			alert(\'手机号码不能为空！\');\r\n			return false;\r\n		}\r\n		if (mobile.length != 11) {\r\n			alert(\'请输入有效的手机号码，需是11位！\');\r\n			return false;\r\n		}\r\n\r\n		var myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\\d{8})$/;\r\n		if (!myreg.test(mobile)) {\r\n			alert(\'请输入有效的手机号码！\');\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n```\r\n### 12. 验证身份证号码（需是有效身份证）\r\n```javascript\r\n		<script type=\"text/javascript\">\r\n			// 构造函数，变量为15位或者18位的身份证号码\r\n			function clsIDCard(CardNo) {\r\n				this.Valid = false;\r\n				this.ID15 = \'\';\r\n				this.ID18 = \'\';\r\n				this.Local = \'\';\r\n				if (CardNo != null) this.SetCardNo(CardNo);\r\n			}\r\n\r\n			// 设置身份证号码，15位或者18位\r\n			clsIDCard.prototype.SetCardNo = function(CardNo) {\r\n				this.ID15 = \'\';\r\n				this.ID18 = \'\';\r\n				this.Local = \'\';\r\n				CardNo = CardNo.replace(\" \", \"\");\r\n				var strCardNo;\r\n				if (CardNo.length == 18) {\r\n					pattern = /^\\d{17}(\\d|x|X)$/;\r\n					if (pattern.exec(CardNo) == null) return;\r\n					strCardNo = CardNo.toUpperCase();\r\n				} else {\r\n					pattern = /^\\d{15}$/;\r\n					if (pattern.exec(CardNo) == null) return;\r\n					strCardNo = CardNo.substr(0, 6) + \'19\' + CardNo.substr(6, 9)\r\n					strCardNo += this.GetVCode(strCardNo);\r\n				}\r\n				this.Valid = this.CheckValid(strCardNo);\r\n			}\r\n\r\n			// 校验身份证有效性\r\n			clsIDCard.prototype.IsValid = function() {\r\n				return this.Valid;\r\n			}\r\n\r\n			// 返回生日字符串，格式如下，1981-10-10\r\n			clsIDCard.prototype.GetBirthDate = function() {\r\n				var BirthDate = \'\';\r\n				if (this.Valid) BirthDate = this.GetBirthYear() + \'-\' + this.GetBirthMonth() + \'-\' + this.GetBirthDay();\r\n				return BirthDate;\r\n			}\r\n\r\n			// 返回生日中的年，格式如下，1981\r\n			clsIDCard.prototype.GetBirthYear = function() {\r\n				var BirthYear = \'\';\r\n				if (this.Valid) BirthYear = this.ID18.substr(6, 4);\r\n				return BirthYear;\r\n			}\r\n\r\n			// 返回生日中的月，格式如下，10\r\n			clsIDCard.prototype.GetBirthMonth = function() {\r\n				var BirthMonth = \'\';\r\n				if (this.Valid) BirthMonth = this.ID18.substr(10, 2);\r\n				if (BirthMonth.charAt(0) == \'0\') BirthMonth = BirthMonth.charAt(1);\r\n				return BirthMonth;\r\n			}\r\n\r\n			// 返回生日中的日，格式如下，10\r\n			clsIDCard.prototype.GetBirthDay = function() {\r\n				var BirthDay = \'\';\r\n				if (this.Valid) BirthDay = this.ID18.substr(12, 2);\r\n				return BirthDay;\r\n			}\r\n\r\n			// 返回性别，1：男，0：女\r\n			clsIDCard.prototype.GetSex = function() {\r\n				var Sex = \'\';\r\n				if (this.Valid) Sex = this.ID18.charAt(16) % 2;\r\n				return Sex;\r\n			}\r\n\r\n			// 返回15位身份证号码\r\n			clsIDCard.prototype.Get15 = function() {\r\n				var ID15 = \'\';\r\n				if (this.Valid) ID15 = this.ID15;\r\n				return ID15;\r\n			}\r\n\r\n			// 返回18位身份证号码\r\n			clsIDCard.prototype.Get18 = function() {\r\n				var ID18 = \'\';\r\n				if (this.Valid) ID18 = this.ID18;\r\n				return ID18;\r\n			}\r\n\r\n			// 返回所在省，例如：上海市、浙江省\r\n			clsIDCard.prototype.GetLocal = function() {\r\n				var Local = \'\';\r\n				if (this.Valid) Local = this.Local;\r\n				return Local;\r\n			}\r\n\r\n			clsIDCard.prototype.GetVCode = function(CardNo17) {\r\n				var Wi = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1);\r\n				var Ai = new Array(\'1\', \'0\', \'X\', \'9\', \'8\', \'7\', \'6\', \'5\', \'4\', \'3\', \'2\');\r\n				var cardNoSum = 0;\r\n				for (var i = 0; i < CardNo17.length; i++) cardNoSum += CardNo17.charAt(i) * Wi[i];\r\n				var seq = cardNoSum % 11;\r\n				return Ai[seq];\r\n			}\r\n\r\n			clsIDCard.prototype.CheckValid = function(CardNo18) {\r\n				if (this.GetVCode(CardNo18.substr(0, 17)) != CardNo18.charAt(17)) return false;\r\n				if (!this.IsDate(CardNo18.substr(6, 8))) return false;\r\n				var aCity = {\r\n					11: \"北京\",\r\n					12: \"天津\",\r\n					13: \"河北\",\r\n					14: \"山西\",\r\n					15: \"内蒙古\",\r\n					21: \"辽宁\",\r\n					22: \"吉林\",\r\n					23: \"黑龙江 \",\r\n					31: \"上海\",\r\n					32: \"江苏\",\r\n					33: \"浙江\",\r\n					34: \"安徽\",\r\n					35: \"福建\",\r\n					36: \"江西\",\r\n					37: \"山东\",\r\n					41: \"河南\",\r\n					42: \"湖北 \",\r\n					43: \"湖南\",\r\n					44: \"广东\",\r\n					45: \"广西\",\r\n					46: \"海南\",\r\n					50: \"重庆\",\r\n					51: \"四川\",\r\n					52: \"贵州\",\r\n					53: \"云南\",\r\n					54: \"西藏 \",\r\n					61: \"陕西\",\r\n					62: \"甘肃\",\r\n					63: \"青海\",\r\n					64: \"宁夏\",\r\n					65: \"新疆\",\r\n					71: \"台湾\",\r\n					81: \"香港\",\r\n					82: \"澳门\",\r\n					91: \"国外\"\r\n				};\r\n				if (aCity[parseInt(CardNo18.substr(0, 2))] == null) return false;\r\n				this.ID18 = CardNo18;\r\n				this.ID15 = CardNo18.substr(0, 6) + CardNo18.substr(8, 9);\r\n				this.Local = aCity[parseInt(CardNo18.substr(0, 2))];\r\n				return true;\r\n			}\r\n\r\n			clsIDCard.prototype.IsDate = function(strDate) {\r\n				var r = strDate.match(/^(\\d{1,4})(\\d{1,2})(\\d{1,2})$/);\r\n				if (r == null) return false;\r\n				var d = new Date(r[1], r[2] - 1, r[3]);\r\n				return (d.getFullYear() == r[1] && (d.getMonth() + 1) == r[2] && d.getDate() == r[3]);\r\n			}\r\n\r\n\r\n			function valiIdCard(idCard) {\r\n				var checkFlag = new clsIDCard(idCard);\r\n				if (!checkFlag.IsValid()) {\r\n					alert(\"输入的身份证号无效,请输入真实的身份证号！\");\r\n					document.getElementByIdx(\"idCard\").focus();\r\n					return false;\r\n				} else {\r\n					alert(\"是有效身份证！\");\r\n				}\r\n			}\r\n		</script>\r\n```\r\n#### 转载自:[https://blog.csdn.net/qq_27628085/article/details/81198962](https://blog.csdn.net/qq_27628085/article/details/81198962)', '2020-07-07 16:04:49', 'https://p.ssl.qhimg.com/t01b16aca138cd5d16f.jpg?size=720x400', '转载', '', '', '', '12个常用的JS表单验证', '2022-08-10 17:21:01', '108', '141', '1', '12种常用JS表单验证，部分使用正则表达式。包含常用邮箱验证、身份证验证、手机号验证、密码组合验证等等');
INSERT INTO `t_detail` VALUES ('176', '', '', '## 获取IP地址\r\n在开发工作中,我们常常需要获取客户端的IP\r\n### 1、nginx配置\r\n为了拿到真实的IP地址,避免代理等错误源,需要在nginx配置\r\n```nginx\r\nlocation / {\r\n            # 指向当前的某个服务端口(根据服务单独java打包jar开启对应的服务)\r\n            proxy_pass   http://127.0.0.1:端口号;\r\n​\r\n            # 这里配置java获取客户端真实的ip地址(避免因为nginx反向代理造成ip 127.0.0.1等其他错误现象)\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            set $Real $http_x_forwarded_for;\r\n            if ( $Real ~ (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+),(.*) ){\r\n                set $Real $1.$2.$3.$4;\r\n            }\r\n            proxy_set_header X-Real-Ip $Real;\r\n        }\r\n```\r\n### 2、java API 获取\r\n```java\r\n//获取ip地址\r\n    @GetMapping(value = \"/getIp\")\r\n    @ResponseBody\r\n    private String getIpAddr(HttpServletRequest request) {\r\n        String ip = request.getHeader(\"x-forwarded-for\");\r\n        System.out.println(\"x-forwarded-for ip: \" + ip);\r\n        if (ip != null && ip.length() != 0 && !\"unknown\".equalsIgnoreCase(ip)) {\r\n            // 多次反向代理后会有多个ip值，第一个ip才是真实ip\r\n            if (ip.indexOf(\",\") != -1) {\r\n                ip = ip.split(\",\")[0];\r\n            }\r\n        }\r\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n            ip = request.getHeader(\"Proxy-Client-IP\");\r\n            System.out.println(\"Proxy-Client-IP ip: \" + ip);\r\n        }\r\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\r\n            System.out.println(\"WL-Proxy-Client-IP ip: \" + ip);\r\n        }\r\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n            ip = request.getHeader(\"HTTP_CLIENT_IP\");\r\n            System.out.println(\"HTTP_CLIENT_IP ip: \" + ip);\r\n        }\r\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n            ip = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\r\n            System.out.println(\"HTTP_X_FORWARDED_FOR ip: \" + ip);\r\n        }\r\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n            ip = request.getHeader(\"X-Real-IP\");\r\n            System.out.println(\"X-Real-IP ip: \" + ip);\r\n        }\r\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n            ip = request.getRemoteAddr();\r\n            System.out.println(\"getRemoteAddr ip: \" + ip);\r\n        }\r\n        System.out.println(\"获取客户端ip: \" + ip);\r\n        return ip;\r\n    }\r\n```\r\n#### 原文地址:[https://dsx2016.com/?p=226](https://dsx2016.com/?p=226 \"https://dsx2016.com/?p=226\")', '2020-07-10 21:35:13', 'https://bpic.588ku.com//element_origin_min_pic/19/04/04/b9f7a185292b99fc476991b35c57ab07.jpg', '转载', '', '', '', 'Java获取访客IP地址', '2022-08-10 17:20:55', '34', '140', '1', '在开发工作中,我们常常需要获取客户端的IP，本文提供两种获取客户端真实IP的方法。');
INSERT INTO `t_detail` VALUES ('206', '', '', '# Git学习笔记\r\n\r\n## 1、用户信息\r\n\r\n```bash\r\n# 设置用户信息\r\ngit config --global user.name \"zm\"\r\ngit config --global user.email \"1456133139@qq.com\"\r\n# 查看用户信息\r\ngit config --global user.name\r\ngit config --global user.email\r\n```\r\n\r\n------------\r\n\r\n\r\n## 2、仓库管理\r\n\r\n### 2.1 初始化git本地仓库\r\n\r\n```bash\r\ngit init\r\n```\r\n\r\n------------\r\n\r\n\r\n### 2.2 本地仓库管理\r\n\r\n```bash\r\ngit add 		# 工作区 -> 暂存区\r\ngit commit 		# 暂存区 -> 本地仓库\r\ngit status		# 查看状态\r\ngit log 		# 查看提交记录\r\n```\r\n\r\n> **一般使用 git add .**\r\n\r\n------------\r\n\r\n\r\n### 2.3 版本回退\r\n\r\n```bash\r\ngit reset --hard [commitID]\r\ngit reflog                    # 查看已经删除的提交记录\r\n```\r\n\r\n> **可以通过.gitignore配置文件设置不需要提交的文件**\r\n\r\n------------\r\n\r\n## 3、分支管理\r\n\r\n```bash\r\ngit branch						# 查看分支\r\ngit branch -d [branchID]		# 删除分支\r\ngit branch [branchID]			# 创建分支\r\ngit checkout					# 切换分支\r\ngit checkout -b [branchID]		# 创建并切换分支\r\ngit merge [branchID]			# 合并分支\r\n```\r\n\r\n> **git branch -D [branchID] 可以强制删除分支**\r\n\r\n**<-** *两个分支对相同文件的修改可能会存在冲突，这时候需要手动解决冲突，重新add、commit* **->**\r\n\r\n------------\r\n\r\n## 4、常见的不同环境下分支作用\r\n\r\n\r\n- **master** (生产)分支\r\n	- 上线分支，develop版本更新结束merge到master并上线\r\n- **develop** (开发)分支\r\n	- 从开发分支branch功能分支进行开发，结束后merge到devlop分支\r\n- **hotfix** (DEBUG)分支\r\n	- 从master中拉取代码并修改，然后merge到master和develop分支\r\n\r\n\r\n------------\r\n\r\n## 5、配置SSH公钥\r\n\r\n```bash\r\nssh-keygen -t rsa 		# 生成SSH公钥\r\ncat ~/.ssh/id_rsa.pub	# 查看当前公钥\r\nssh -T git@gitee.com	# 查看连接是否成功\r\n\r\n```\r\n> **生成公钥之后不断回车即可(如果公钥已经存在，则会自动覆盖)**\r\n\r\n\r\n------------\r\n\r\n## 6、远程仓库管理\r\n\r\n```bash\r\n# 链接远程仓库，仓库名默认origin\r\ngit remote add [远程仓库名] [仓库路径]\r\n\r\n# 查看远程仓库\r\ngit remote\r\n\r\ngit push [远程仓库名] [本地分支名]:[远端分支名]\r\n# 如果远端分支名和本地分支名相同，则可以只写本地分支\r\n# git push origin master\r\n\r\ngit push -f 	# 表示强制覆盖\r\ngit push --set-upstream		# 推送到远端的同时并建立和远端的关联关系\r\n# 如果当前分支已经和远端分支关联，则可以省略分支名和远端名\r\n\r\ngit branch -vv		# 查看本地分支与远端分支的关联关系\r\n\r\ngit clone [仓库路径] [本地目录]		# 本地目录可以省略\r\n\r\ngit fetch		# 抓取：将远端仓库里的更新都抓取到本地，不进行合并\r\n				# 如果不指定远端名称和分支名称，则抓取所有分支\r\n\r\ngit pull		# 拉取：将远端仓库里的更新拉到本地并自动合并，等同于fetch+merge\r\n				# 如果不指定远端名称和分支名称，则抓取所有并更新当前分支\r\n```\r\n\r\n------------\r\n\r\n\r\n\r\n## 7、.gitignore通用配置文件\r\n\r\n```bash\r\n# Compiled class file\r\n*.class\r\n\r\n# Log file\r\n*.log\r\n\r\n# BlueJ files\r\n*.ctxt\r\n\r\n# Mobile Tools for Java (J2ME)\r\n.mtj.tmp/\r\n\r\n# Package Files #\r\n*.jar\r\n*.war\r\n*.nar\r\n*.ear\r\n*.zip\r\n*.tar.gz\r\n*.rar\r\n\r\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\r\nhs_err_pid*\r\n\r\n.mvn/\r\n.idea/\r\nlog/\r\ntarget/\r\n*.iml\r\n\r\n```\r\n\r\n------------\r\n\r\n## 8、IDEA集成Git\r\n\r\n### 8.1 查看版本信息\r\n\r\n> File -> Settings -> Version Control -> Git -> Path to Git executable -> Test\r\n\r\n### 8.2 设置IDEA Terminal集成Bash\r\n\r\n> File -> Settings -> Tools -> Terminal -> Application Settings -> Shell path -> X:\\Git\\bin\\bash.exe\r\n', '2022-08-04 21:38:45', 'https://fc1tn.baidu.com/it/u=232235860,1551268367&fm=202&mola=new&crop=v1', '原创', '', '', '', 'Git学习笔记', '2022-08-10 20:55:55', '22', '140', '1', '用户信息配置、仓库管理、分支管理、SSH公钥、远程仓库管理、通用配置文件、IDEA集成');
INSERT INTO `t_detail` VALUES ('214', '', '', '# 1、Spring Boot整合Swagger\r\n\r\n## 1.1 引入依赖\r\n\r\n```xml\r\n<!--Swagger依赖-->\r\n<dependency>\r\n	<groupId>io.springfox</groupId>\r\n	<artifactId>springfox-swagger2</artifactId>\r\n	<version>2.9.2</version>\r\n</dependency>\r\n<dependency>\r\n	<groupId>io.springfox</groupId>\r\n	<artifactId>springfox-swagger-ui</artifactId>\r\n	<version>2.9.2</version>\r\n</dependency>\r\n```\r\n\r\n## 1.2 编写配置文件\r\n\r\n```java\r\n@Configuration\r\n@EnableSwagger2\r\npublic class SwaggerConfig {\r\n\r\n    @Bean\r\n    public Docket createRestApi() {\r\n\r\n        return new Docket(DocumentationType.SWAGGER_2)\r\n                .pathMapping(\"/\")\r\n                .select()\r\n                // 扫描哪个接口的包\r\n                .apis(RequestHandlerSelectors.basePackage(\"com.controller\"))\r\n                .paths(PathSelectors.any())\r\n                .build().apiInfo(new ApiInfoBuilder()\r\n                        .title(\"标题：SpringBoot整合Swagger\")\r\n                        .description(\"详细信息\")\r\n                        .version(\"1.0\")\r\n                        .contact(new Contact(\"zm\", \"http://null/\", \"1456133139@qq.com\"))\r\n                        .license(\"The zm License\")\r\n                        .licenseUrl(\"null\")\r\n                        .build());\r\n    }\r\n}\r\n```\r\n\r\n# 2、控制器注解\r\n\r\n```java\r\n@Api(tags = \"用户服务接口\") // 用在类上\r\npublic class UserController{}\r\n\r\n@ApiOperation(value = \"查询所有用户\", notes = \"<span style=\'color:red;\'>描述：</span>&nbsp;&nbsp;用来查询所有用户信息的接口\") // 用在方法上\r\npublic Map<String, Object> findAll() {}\r\n```\r\n\r\n## 2.1 get方式传递数据\r\n\r\n```java\r\n@PostMapping(\"/save\")\r\n@ApiOperation(value = \"保存用户信息\", notes = \"<span style=\'color:red;\'>描述：</span>&nbsp;&nbsp;用来保存用户信息的接口\")\r\n@ApiImplicitParams({\r\n	@ApiImplicitParam(name = \"id\", value = \"用户ID\", dataType = \"String\", defaultValue = \"21\"),\r\n	@ApiImplicitParam(name = \"name\", value = \"用户姓名\", dataType = \"String\", defaultValue = \"zm\")\r\n})\r\npublic Map<String, Object> save(String id, String name) {}\r\n```\r\n\r\n## 2.2 rest方式传递数据\r\n\r\n```java\r\n@PostMapping(\"/save/{id}/{name}\")\r\n@ApiOperation(value = \"保存用户信息\", notes = \"<span style=\'color:red;\'>描述：</span>&nbsp;&nbsp;用来保存用户信息的接口\")\r\n@ApiImplicitParams({\r\n	@ApiImplicitParam(name = \"id\", value = \"用户ID\", dataType = \"String\", defaultValue = \"21\", paramType = \"path\"),\r\n	@ApiImplicitParam(name = \"name\", value = \"用户姓名\", dataType = \"String\", defaultValue = \"zm\", paramType = \"path\")\r\n})\r\npublic Map<String, Object> save(@PathVariable(\"id\") String id, @PathVariable(\"name\") String name) {}\r\n```\r\n\r\n## 2.3 json方式传递数据\r\n\r\n```java\r\n@PostMapping()\"/save\"\r\n@ApiOperation(value = \"保存用户信息\", notes = \"<span style=\'color:red;\'>描述：</span>&nbsp;&nbsp;用来保存用户信息的接口\")\r\npublic Map<String, Object> save(@RequestBody User user) {\r\n```\r\n\r\n> **JSON需要创建实体类**\r\n\r\n# 3、错误码编辑\r\n\r\n```java\r\n@ApiOperation(value = \"保存用户信息\", notes = \"<span style=\'color:red;\'>描述：</span>&nbsp;&nbsp;用来保存用户信息的接口\")\r\n@ApiResponses({\r\n	@ApiResponse(code = 401, message = \"未授权\"),\r\n	@ApiResponse(code = 404, message = \"路径不存在\"),\r\n	@ApiResponse(code = 200, message = \"保存成功\")\r\n})\r\n```', '2022-08-05 16:47:32', 'https://img.cmsblogs.cn/2021/03/20210319173514370.jpg', '原创', '', '', '', 'Swagger学习笔记', '2022-08-10 17:21:25', '18', '140', '1', 'Spring Boot整合Swagger、配置文件、控制器注解、数据传递、错误码编辑');
INSERT INTO `t_detail` VALUES ('216', '', '', '# 1、MySQL常用命令与简单查询\r\n\r\n## 1.1 命令行\r\n```SQL\r\nshow databases;		# 查看数据库中的表\r\nuse [表名]\r\n\r\nmysql -u root -p	# 连接数据库\r\ndesc [数据库名称]	# 查看数据库类型\r\n\r\ncreate database bjpowernode; # 创建数据库\r\nshow tables;		# 查看表\r\n\r\nselect version(); # 查看MySQL版本号\r\n```\r\n\r\n## 1.2 简单查询\r\n\r\n```SQL\r\nselect * from dept;				# 查看所有表数据\r\n\r\ndesc [表名]	# 查看表结构\r\n```\r\n\r\n------------\r\n\r\n\r\n**select * 的缺点**\r\n\r\n1. 效率低\r\n2. 可读性差\r\n3. 实际开发不建议\r\n\r\n## 1.3 别名\r\n\r\n```SQL\r\nselect [表1],[表2] as [别名] from dept;\r\n# as可以省略\r\n# 当别名中有空格，用单引号\'\'隔开\r\n# 也可以加双引号，但是建议用\'单引号\'括起来\r\n```\r\n\r\n## 1.4 字段中的数学表达式\r\n\r\n```SQL\r\nselect salary*12 from employee\r\n```\r\n\r\n# 2、条件查询\r\n\r\n```SQL\r\nselect\r\n	字段1、字段2、字段3...\r\nfrom\r\n	表名\r\nwhere\r\n	条件;\r\n```\r\n\r\n- = 等于\r\n```SQL\r\n# 查询薪资等于800的员工姓名和编号\r\nselect empno,ename from emp where sal = 800;\r\n```\r\n\r\n- <>或!= 不等于\r\n```SQL\r\n# 查询薪资不等于800的员工姓名和编号\r\nselect empno,ename from emp where sal != 800;\r\n```\r\n\r\n- < 小于\r\n```SQL\r\n# 查询薪资小于2000的员工姓名和编号\r\nmysql> select empno,ename,sal from emp where sal < 2000;\r\n```\r\n\r\n- <= 小于等于\r\n```SQL\r\n# 查询薪资小于等于3000的员工姓名和编号\r\nselect empno,ename,sal from emp where sal <= 3000;\r\n```\r\n\r\n- \\> 大于\r\n```SQL\r\n# 查询薪资大于3000的员工姓名和编号\r\nselect empno,ename,sal from emp where sal > 3000;\r\n```\r\n\r\n- \\>= 大于等于\r\n```SQL\r\n# 查询薪资大于等于3000的员工姓名和编号\r\nselect empno,ename,sal from emp where sal >= 3000;\r\n```\r\n\r\n- between … and …. 两个值之间, 等同于 >= and <=\r\n```SQL\r\n# 查询薪资在2450和3000之间的员工信息,包括2450和3000\r\n	select empno,ename,sal from emp where sal >= 2450 and sal <= 3000;\r\n	select\r\n		empno,ename,sal\r\n	from\r\n		emp\r\n	where\r\n		sal between 2450 and 3000;\r\n```\r\n\r\n> **between...and...左边的值一定比右边小且为闭区间**\r\n\r\n- 查询null结果要用is不能用=\r\n\r\n- is的反义词为is not\r\n\r\n```SQL\r\n# 查询哪些员工的津贴/补助为null\r\nselect empno,ename,sal,comm from emp where comm is null;\r\n```\r\n\r\n> **&&条件在数据库中用and**\r\n\r\n> **and的优先级比or高 **\r\n\r\n#### in关键字\r\n\r\n```SQL\r\n# 查询工作岗位是MANAGER和SALESMAN的员工\r\nselect empno,ename,job from emp where job = \'MANAGER\' or job = \'SALESMAN\';\r\nselect empno,ename,job from emp where job in(\'MANAGER\', \'SALESMAN\');\r\n```\r\n> 注意：in不是一个区间。in后面跟的是具体的值\r\n\r\n\r\n# 3、模糊查询\r\n\r\n#### like支持%和_匹配\r\n\r\n```SQL\r\n# %0% 找出名字中含有O的\r\nselect ename from emp where ename like \'%O%\';\r\n\r\n# %T 找出名字以T结尾的\r\nselect ename from emp where ename like \'%T\'\r\n\r\n# K% 找出名字以K开始的\r\nselect ename from emp where ename like \'K%\';\r\n\r\n# _A% 找出第二个字每是A的\r\nselect ename from emp where ename like \'_A%\';\r\n\r\n# __R% 找出第三个字母是R的\r\nselect ename from emp where ename like \'__R%\';\r\n```\r\n\r\n> \\为转义字符适用于查询的数据跟想要的数据冲突\r\n\r\n\r\n# 4、排序\r\n\r\n```SQL\r\nselect xxx from emp order by xxx; # xxx为想要排序的字段\r\n```\r\n\r\n> 默认为升序(从上至下，由小及大)\r\n\r\n```SQL\r\nselect xxx from emp order by xxx desc; # 降序\r\n```\r\n\r\n```SQL\r\nselect xxx from emp order by xxx asc; # 升序\r\n```\r\n\r\n## 4.2 多字段排序\r\n\r\n```SQL\r\nselect\r\n	ename,sal\r\nfrom\r\n	emp\r\norder by\r\n	sal asc, ename asc;\r\n```\r\n\r\n> **只有sal相等的时候，才会考虑启用ename排序**\r\n\r\n\r\n# 5、单行处理函数\r\n\r\n> 特点：一行一行处理，每一行输出一个结果\r\n\r\n```SQL\r\nlower() 	# 转小写\r\nupper() 	# 转大写\r\nsubstr() 	# 取子串 格式:substr(被截取的字符串,起始下标,截取长度)\r\nlength() 	# 取长度\r\ntrim()		# 去空格\r\nconcat(a,b)	# 将b字符串拼到a字符串后面\r\n```\r\n> **substr起始下标为1**\r\n\r\n```SQL\r\nround(小数，保留的小数位) 	# 四舍五入\r\nrand() 		#生成随机数 ，且随机数都为1到0之间的小数\r\n```\r\n\r\n## 5.2 处理NULL\r\n\r\n#### 在数据库中，有NULL参与的数学运算最终值总是NULL\r\n\r\n> **注意：NULL只要参与运算，最终结果一定是NULL。为了避免这个现象，需要使用ifnull函数**\r\n\r\n```SQL\r\n# 补助为NULL的时候，将补助当做0\r\nselect ename, (sal + ifnull(comm, 0)) * 12 as yearsal from emp;\r\n```\r\n\r\n# 6、多行处理函数(分组函数)\r\n\r\n## 6.1 分组函数必须先进行分组，然后才能用\r\n\r\n- **求和 sum()**\r\n\r\n- **求平均数 avg()**\r\n\r\n- **求最大值 max()**\r\n\r\n- **求最小值 min(0)**\r\n\r\n- **计数 count()		统计该字段下所有不为null的元素个数**\r\n\r\n> **分组函数自动处理NULL，不需要提前对NULL进行处理**\r\n\r\n- count(具体字段)：表示统计该字段下所有不为NULL的元素的总数\r\n\r\n- count(*)：统计表当中的总行数\r\n\r\n## 6.2 分组查询\r\n\r\n\r\n```SQL\r\nselect\r\n	...\r\nfrom\r\n	...\r\nwhere\r\n	...\r\ngroup by\r\n	...\r\norder by\r\n	...;\r\n```\r\n**执行顺序:**\r\n\r\n1. from\r\n2. where\r\n3. group by\r\n4. select\r\n5. order by\r\n\r\n\r\n> 由于where执行时group by分组还未执行,所以分组函数不能直接运用在where后面\r\n\r\n> select后面可以接分组函数,因为执行select的时候分组函数group by已经执行了\r\n\r\n**一旦在语句后加入group by,select后不能加入尚未分组的字段**\r\n\r\n> **group by 后面可以跟多个字段进行联合分组**\r\n\r\n```SQL\r\n# 找出每个工作岗位的工资和\r\n# 实现思路:按照工作岗位分组，然后对工资求和\r\nselect\r\n	job,sum(sal)\r\nfrom\r\n	emp\r\ngroup by\r\n	job;\r\n\r\n# 找出每个部门的最高薪资\r\n# 实现思路:按照部门编号分组，求每一组的最大值\r\nselect\r\n	deptno,max(sal)\r\nfrom\r\n	emp\r\ngroup by\r\n	deptno;\r\n\r\n# 找出“每个部门，不同工作岗位”的最高薪资\r\n# 实现思路:两个字段联合成1个字段看\r\nselect\r\n	deptno, job, max(sal)\r\nfrom\r\n	emp\r\ngroup by\r\n	deptno, job;\r\n```\r\n\r\n\r\n## 6.3 having语句\r\n\r\n- 可以对分完组之后的数据进一步进行过滤\r\n\r\n- 不能单独使用，不能代替where\r\n\r\n- 能使用where过滤掉的尽量用where\r\n\r\n```SQL\r\n# 找出每个部门最高薪资，要求显示最高薪资大于3000的\r\nselect\r\n	deptno,max(sal)\r\nfrom\r\n	emp\r\ngroup by\r\n	deptno\r\nhaving\r\n	max(sal) > 3000;\r\n\r\n# 以上的sql语句执行效率低\r\n# 优化策略：where和having，优先选择where，where实在完成不了了，再选择having\r\n\r\nselect\r\n	deptno,max(sal)\r\nfrom\r\n	emp\r\nwhere\r\n	sal > 3000\r\ngroup by\r\n	deptno;\r\n```\r\n\r\n## 6.4 练习\r\n\r\n```SQL\r\n# 找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除MANAGER岗位之外，按照平均薪资降序排。\r\nselect\r\n	job, avg(sal) as avgsal\r\nfrom\r\n	emp\r\nwhere\r\n	job <> \'MANAGER\'\r\ngroup by\r\n	job\r\nhaving\r\n	avg(sal) > 1500\r\norder by\r\n	avgsal desc;\r\n```\r\n\r\n## 6.5 去除重复记录 distinct\r\n\r\n```SQL\r\nselect distinct job from emp;\r\n# distinct只能出现在所有字段的最前方\r\n\r\n# distinct出现在两个字段之前，表示两个字段联合起来去重\r\nselect distinct job,deptno from emp;\r\n\r\n# 统计一下工作岗位的数量\r\nselect count(distinct job) from emp;\r\n```\r\n\r\n# 7、连接查询\r\n\r\n## 7.1 分类\r\n\r\n1. SQL92：1992年出现的语法\r\n2. **SQL99：1999年出现的语法**\r\n\r\n- 内连接\r\n	- 等值连接\r\n	- 非等值连接\r\n	- 自连接\r\n- 外连接\r\n	- 左外连接\r\n	- 右外连接\r\n- ~~全连接~~\r\n\r\n## 7.2 笛卡尔积现象\r\n\r\n### 7.2.1 原因\r\n\r\n> **当两张表进行连接查询，没有任何条件限制的时候，最终查询结果条数，是两张表条数的乘积，这种现象被称为：笛卡尔积现象**\r\n\r\n```SQL\r\nselect ename,dname from emp, dept;\r\n```\r\n\r\n### 7.2.2 怎么避免\r\n\r\n> **连接时加条件，满足这个条件的记录被筛选出来**\r\n\r\n```SQL\r\n# 表起别名。很重要。效率问题。\r\nselect\r\n	e.ename,d.dname\r\nfrom\r\n	emp e, dept d\r\nwhere\r\n	e.deptno = d.deptno; # SQL92语法。\r\n```\r\n\r\n> **结果变少了，但是匹配过程中，匹配的次数没变。尽量避免表的连接次数**\r\n\r\n## 7.3 内连接-等值连接\r\n\r\n> **条件是等量关系，所以被称为等值连接**\r\n\r\n```SQL\r\n# 查询每个员工所在部门名称，显示员工名和部门名\r\n# emp e和dept d表进行连接。条件是：e.deptno = d.deptno\r\n\r\n# SQL92语法\r\nselect\r\n	e.ename,d.dname\r\nfrom\r\n	emp e, dept d\r\nwhere\r\n	e.deptno = d.deptno;\r\n# 缺点：结构不清晰，表的连接条件，和后期进一步筛选的条件，都放到了where后面\r\n\r\n# SQL99语法\r\nselect\r\n	e.ename,d.dname\r\nfrom\r\n	emp e\r\njoin\r\n	dept d\r\non\r\n	e.deptno = d.deptno;\r\n# 优点：表连接的条件是独立的，连接之后，如果还需要进一步筛选，再往后继续添加where\r\n\r\n# 示例：\r\nselect\r\n	...\r\nfrom\r\n	a\r\njoin\r\n	b\r\non\r\n	a和b的连接条件\r\nwhere\r\n	筛选条件\r\n```\r\n\r\n## 7.4 内连接-非等值连接\r\n\r\n> **条件不是一个等量关系，称为非等值连接**\r\n\r\n```SQL\r\n# 找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级\r\nmysql> select * from emp; e\r\n+-------+--------+-----------+------+------------+---------+---------+--------+\r\n| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |\r\n+-------+--------+-----------+------+------------+---------+---------+--------+\r\n|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |\r\n|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |\r\n|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |\r\n|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |\r\n....\r\n\r\nmysql> select * from salgrade; s\r\n+-------+-------+-------+\r\n| GRADE | LOSAL | HISAL |\r\n+-------+-------+-------+\r\n|     1 |   700 |  1200 |\r\n|     2 |  1201 |  1400 |\r\n|     3 |  1401 |  2000 |\r\n|     4 |  2001 |  3000 |\r\n|     5 |  3001 |  9999 |\r\n+-------+-------+-------+\r\n\r\nselect\r\n	e.ename, e.sal, s.grade\r\nfrom\r\n	emp e\r\njoin\r\n	salgrade s\r\non\r\n	e.sal between s.losal and s.hisal;\r\n```\r\n\r\n## 7.5 内连接-自连接\r\n\r\n```SQL\r\n# 查询员工的上级领导，要求显示员工名和对应的领导名\r\n# 技巧：一张表看成两张表\r\nselect\r\n	a.ename as \'员工名\', b.ename as \'领导名\'\r\nfrom\r\n	emp a\r\njoin\r\n	emp b\r\non\r\n	a.mgr = b.empno;\r\n```\r\n\r\n## 7.6 外连接-右外连接\r\n\r\n> **在外连接当中，两张表连接，产生了主次关系**\r\n\r\n```SQL\r\nselect\r\n	e.ename,d.dname\r\nfrom\r\n	emp e\r\nright join\r\n	dept d\r\non\r\n	e.deptno = d.deptno;\r\n# right代表：表示将join关键字右边的这张表看成主表\r\n```\r\n\r\n## 7.7 外连接-左外连接\r\n\r\n```SQL\r\nselect\r\n	e.ename,d.dname\r\nfrom\r\n	dept d\r\nleft join\r\n	emp e\r\non\r\n	e.deptno = d.deptno;\r\n\r\n# 任何一个右连接都有左连接的写法。\r\n# 任何一个左连接都有右连接的写法。\r\n\r\n# 案例 查询每个员工的上级领导，要求显示所有员工的名字和领导名\r\nselect\r\n	a.ename as \'员工名\', b.ename as \'领导名\'\r\nfrom\r\n	emp a\r\nleft join\r\n	emp b\r\non\r\n	a.mgr = b.empno;\r\n```\r\n\r\n#### 外连接的查询结果条数一定是 >= 内连接的查询结果条数\r\n\r\n## 7.8 三、四张表的连接\r\n\r\n```SQL\r\n# 语法\r\nselect\r\n	...\r\nfrom\r\n	a\r\njoin\r\n	b\r\non\r\n	a和b的连接条件\r\njoin\r\n	c\r\non\r\n	a和c的连接条件\r\nright join\r\n	d\r\non\r\n	a和d的连接条件\r\n\r\n# 案例 找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级\r\nselect\r\n	e.ename,e.sal,d.dname,s.grade\r\nfrom\r\n	emp e\r\njoin\r\n	dept d\r\non\r\n	e.deptno = d.deptno\r\njoin\r\n	salgrade s\r\non\r\n	e.sal between s.losal and s.hisal;\r\n\r\n+--------+---------+------------+-------+\r\n| ename  | sal     | dname      | grade |\r\n+--------+---------+------------+-------+\r\n| SMITH  |  800.00 | RESEARCH   |     1 |\r\n| ALLEN  | 1600.00 | SALES      |     3 |\r\n| WARD   | 1250.00 | SALES      |     2 |\r\n| JONES  | 2975.00 | RESEARCH   |     4 |\r\n| MARTIN | 1250.00 | SALES      |     2 |\r\n| BLAKE  | 2850.00 | SALES      |     4 |\r\n| CLARK  | 2450.00 | ACCOUNTING |     4 |\r\n| SCOTT  | 3000.00 | RESEARCH   |     4 |\r\n| KING   | 5000.00 | ACCOUNTING |     5 |\r\n| TURNER | 1500.00 | SALES      |     3 |\r\n| ADAMS  | 1100.00 | RESEARCH   |     1 |\r\n| JAMES  |  950.00 | SALES      |     1 |\r\n| FORD   | 3000.00 | RESEARCH   |     4 |\r\n| MILLER | 1300.00 | ACCOUNTING |     2 |\r\n+--------+---------+------------+-------+\r\n\r\n# 案例 找出每个员工的部门名称以及工资等级，还有上级领导，显示员工名、领导名、部门名、薪资、薪资等级\r\nselect\r\n	e.ename,e.sal,d.dname,s.grade,l.ename\r\nfrom\r\n	emp e\r\njoin\r\n	dept d\r\non\r\n	e.deptno = d.deptno\r\njoin\r\n	salgrade s\r\non\r\n	e.sal between s.losal and s.hisal\r\nleft join\r\n	emp l\r\non\r\n	e.mgr = l.empno;\r\n\r\n+--------+---------+------------+-------+-------+\r\n| ename  | sal     | dname      | grade | ename |\r\n+--------+---------+------------+-------+-------+\r\n| SMITH  |  800.00 | RESEARCH   |     1 | FORD  |\r\n| ALLEN  | 1600.00 | SALES      |     3 | BLAKE |\r\n| WARD   | 1250.00 | SALES      |     2 | BLAKE |\r\n| JONES  | 2975.00 | RESEARCH   |     4 | KING  |\r\n| MARTIN | 1250.00 | SALES      |     2 | BLAKE |\r\n| BLAKE  | 2850.00 | SALES      |     4 | KING  |\r\n| CLARK  | 2450.00 | ACCOUNTING |     4 | KING  |\r\n| SCOTT  | 3000.00 | RESEARCH   |     4 | JONES |\r\n| KING   | 5000.00 | ACCOUNTING |     5 | NULL  |\r\n| TURNER | 1500.00 | SALES      |     3 | BLAKE |\r\n| ADAMS  | 1100.00 | RESEARCH   |     1 | SCOTT |\r\n| JAMES  |  950.00 | SALES      |     1 | BLAKE |\r\n| FORD   | 3000.00 | RESEARCH   |     4 | JONES |\r\n| MILLER | 1300.00 | ACCOUNTING |     2 | CLARK |\r\n+--------+---------+------------+-------+-------+\r\n```\r\n\r\n# 8、子查询\r\n\r\n- **select语句中嵌套select语句，被嵌套的select语句称为子查询**\r\n\r\n- **子查询都可以出现在哪里呢**\r\n	- select (select) ...\r\n	- from (select) ...\r\n	- where (select) ...\r\n\r\n## 8.1 where中的子查询\r\n\r\n```SQL\r\n# 找出比最低工资高的员工姓名和工资\r\n\r\n# 第一步：查询最低工资是多少\r\nselect min(sal) from emp;\r\n+----------+\r\n| min(sal) |\r\n+----------+\r\n|   800.00 |\r\n+----------+\r\n\r\n# 第二步：找出>800的\r\nselect ename,sal from emp where sal > 800;\r\n\r\n# 第三步：合并\r\nselect ename,sal from emp where sal > (select min(sal) from emp);\r\n```\r\n\r\n## 8.2 from中的子查询\r\n\r\n> **注意：from后面的子查询，可以将子查询的查询结果当做一张临时表**\r\n\r\n```SQL\r\n# 找出每个岗位的平均工资的薪资等级\r\n\r\n# 第一步：找出每个岗位的平均工资（按照岗位分组求平均值）\r\nselect job,avg(sal) from emp group by job;\r\n+-----------+-------------+\r\n| job       | avgsal      |\r\n+-----------+-------------+\r\n| ANALYST   | 3000.000000 |\r\n| CLERK     | 1037.500000 |\r\n| MANAGER   | 2758.333333 |\r\n| PRESIDENT | 5000.000000 |\r\n| SALESMAN  | 1400.000000 |\r\n+-----------+-------------+\r\n\r\n# 把以上的查询结果就当做一张真实存在的表t。\r\nselect * from salgrade;\r\n+-------+-------+-------+\r\n| GRADE | LOSAL | HISAL |\r\n+-------+-------+-------+\r\n|     1 |   700 |  1200 |\r\n|     2 |  1201 |  1400 |\r\n|     3 |  1401 |  2000 |\r\n|     4 |  2001 |  3000 |\r\n|     5 |  3001 |  9999 |\r\n+-------+-------+-------+\r\n\r\n# 合并\r\nselect\r\n	t.*, s.grade\r\nfrom\r\n	(select job,avg(sal) as avgsal from emp group by job) t\r\njoin\r\n	salgrade s\r\non\r\n	t.avgsal between s.losal and s.hisal;\r\n```\r\n\r\n## 8.3 select中的子查询\r\n\r\n> **注意：对于select后面的子查询来说，这个子查询只能一次返回1条结果**\r\n\r\n```SQL\r\n# 找出每个员工的部门名称，要求显示员工名，部门名\r\nselect\r\n	e.ename,e.deptno,(select d.dname from dept d where e.deptno = d.deptno) as dname \r\nfrom\r\n	emp e;\r\n\r\n+--------+--------+------------+\r\n| ename  | deptno | dname      |\r\n+--------+--------+------------+\r\n| SMITH  |     20 | RESEARCH   |\r\n| ALLEN  |     30 | SALES      |\r\n| WARD   |     30 | SALES      |\r\n| JONES  |     20 | RESEARCH   |\r\n| MARTIN |     30 | SALES      |\r\n| BLAKE  |     30 | SALES      |\r\n| CLARK  |     10 | ACCOUNTING |\r\n| SCOTT  |     20 | RESEARCH   |\r\n| KING   |     10 | ACCOUNTING |\r\n| TURNER |     30 | SALES      |\r\n| ADAMS  |     20 | RESEARCH   |\r\n| JAMES  |     30 | SALES      |\r\n| FORD   |     20 | RESEARCH   |\r\n| MILLER |     10 | ACCOUNTING |\r\n+--------+--------+------------+\r\n```\r\n\r\n# 9、union合并查询结果集\r\n\r\n> **union的效率要高一些，可以减少表匹配次数**\r\n\r\n- **union在使用的时候的注意事项**\r\n	- 要求两个结果集的列数相同\r\n	- 要求列和列的数据类型一致\r\n\r\n```SQL\r\n# 查询工作岗位是MANAGER和SALESMAN的员工\r\nselect ename,job from emp where job = \'MANAGER\' or job = \'SALESMAN\';\r\nselect ename,job from emp where job in(\'MANAGER\',\'SALESMAN\');\r\n\r\n# 使用union\r\nselect ename,job from emp where job = \'MANAGER\'\r\nunion\r\nselect ename,job from emp where job = \'SALESMAN\';\r\n```\r\n\r\n# 10、limit 分页查询\r\n\r\n- **完整用法：limit startIndex,length**\r\n	- 起始下标从0开始\r\n- **缺省用法：limit 5**\r\n	- 取前5\r\n\r\n```SQL\r\n# 按照薪资降序，取出排名在前5名的员工\r\nselect\r\n	ename,sal\r\nfrom\r\n	emp\r\norder by\r\n	sal desc\r\nlimit 5;\r\n\r\nselect\r\n	ename,sal\r\nfrom\r\n	emp\r\norder by \r\n	sal desc\r\nlimit 0,5;\r\n```\r\n\r\n> **注意：mysql当中limit在order by之后执行**\r\n\r\n```SQL\r\n# 取出工资排名在[3-5]名的员工\r\nselect\r\n	ename,sal\r\nfrom\r\n	emp\r\norder by\r\n	sal desc\r\nlimit\r\n	2, 3;\r\n\r\n# 取出工资排名在[5-9]名的员工\r\nselect\r\n	ename,sal\r\nfrom\r\n	emp\r\norder by\r\n	sal desc\r\nlimit\r\n	4, 5;\r\n```\r\n\r\n## 10.1 分页功能\r\n\r\n\r\n- **每页显示pageSize条记录**\r\n\r\n- **第pageNo页：limit(pageNo - 1) * pageSize , pageSize**\r\n\r\n```java\r\npublic static void main(String[] args){\r\n	// 用户提交过来一个页码，以及每页显示的记录条数\r\n	int pageNo = 5; //第5页\r\n	int pageSize = 10; //每页显示10条\r\n\r\n	int startIndex = (pageNo - 1) * pageSize;\r\n	String sql = \"select ...limit \" + startIndex + \", \" + pageSize;\r\n}\r\n```\r\n\r\n# 11、DQL语句总结(执行顺序)\r\n\r\n```SQL\r\nselect\r\n	...\r\nfrom\r\n	...\r\nwhere\r\n	...\r\ngroup by\r\n	...\r\nhaving\r\n	...\r\norder by\r\n	...\r\nlimit\r\n	...\r\n```\r\n\r\n**执行顺序**\r\n\r\n1. from\r\n2. where\r\n3. group by\r\n4. having\r\n5. select\r\n6. order by\r\n7. limit\r\n\r\n# 12、DDL语句\r\n\r\n```SQL\r\n# DDL包括:create drop alter\r\n\r\n# 创建表\r\ncreate table 表名(\r\n	字段名1 数据类型,\r\n	字段名2 数据类型,\r\n	字段名3 数据类型\r\n);\r\n\r\n# 删除表，表不存在会报错\r\ndrop table t_student;\r\n\r\n# 如果存在就删除\r\ndrop table if exists t_student;\r\n```\r\n\r\n> **表名：建议以t_ 或者 tbl_开始**\r\n\r\n# 13、MySQL中的数据类型\r\n\r\n- varchar(最长255)\r\n	- 优点：可变长度的字符串，节省空间\r\n	- 缺点：速度慢\r\n- char(最长255)\r\n	- 优点：定长字符串，速度快\r\n	- 缺点：使用不当会导致空间浪费\r\n- int(最长11)\r\n- biging\r\n- float\r\n- double\r\n- date\r\n	- 短日期类型，没有时分秒\r\n- datetime\r\n	- 长日期类型，有时分秒\r\n- clob\r\n	- 字符大对象，最多存4G字符串\r\n	- 超过255个字符采用clob\r\n- blob\r\n	- 二进制大对象，存图片声音视频流媒体数据\r\n	- 需要IO流\r\n\r\n# 14、DML语句\r\n\r\n## 14.1 insert语句\r\n\r\n```SQL\r\ninsert into 表名(字段名1,字段名2,字段名3...) values(值1,值2,值3);\r\n\r\n# 字段名可以省略，省略=全部都写\r\ninsert into t_student values(2, \'lisi\', \'f\', 20, \'lisi@123.com\');\r\n\r\n# 一次插入多条记录\r\ninsert into t_user(字段名1,字段名2) values(),(),(),();\r\n```\r\n\r\n### 14.1.1 insert插入日期\r\n\r\n**MySQL的日期格式**\r\n\r\n- %Y 年\r\n- %m 月\r\n- %d 日\r\n- %h 时\r\n- %i 分\r\n- %s 秒\r\n- 默认格式：%Y-%m-%d\r\n\r\n```SQL\r\n# str_to_date：将字符串varchar类型转换成date类型\r\n# 格式：str_to_date(\'字符串日期\', \'日期格式\')\r\n\r\n# date_format：将date类型转换成具有一定格式的varchar字符串类型\r\n# 格式：date_format(日期类型数据, \'日期格式\')\r\n```\r\n\r\n> **如果日期字符串是默认格式，str_to_date就不需要了**\r\n\r\n### 14.1.2 date和datetime的区别\r\n\r\n- **date是短日期，只包含年月日信息**\r\n\r\n	- 默认格式：%Y-%m-%d\r\n\r\n- **datetime是长日期，包含年月日时分秒信息**\r\n\r\n	- 默认格式：%Y-%m-%d %h:%i:%s\r\n\r\n```SQL\r\n# now() 获取当前时间，datetime类型\r\ninsert into t_user(id,name,birth,create_time) values(2,\'lisi\',\'1991-10-01\',now());\r\n```\r\n\r\n## 14.2 update语句\r\n\r\n```SQL\r\nupdate 表名 set 字段名1=值1,字段名2=值2,字段名3=值3... where 条件;\r\n# 注意：没有条件限制会导致所有数据全部更新\r\n\r\nupdate t_user set name = \'jack\', birth = \'2000-10-11\' where id = 2;\r\nupdate t_user set name = \'jack\', birth = \'2000-10-11\', create_time = now() where id = 2;\r\n```\r\n\r\n## 14.3 delete语句\r\n\r\n```SQL\r\ndelete from 表名 where 条件;\r\n# 注意：没有条件，整张表的数据会全部删除\r\n\r\ndelete from t_user where id = 2;\r\n```\r\n\r\n### 14.3.1 truncate语句\r\n\r\n- delete删除数据的原理\r\n	- 表中的数据被删除了，硬盘上的真实存储空间不会被释放\r\n	- 优点：支持回滚\r\n	- 缺点：效率低\r\n\r\n- truncate删除数据的原理\r\n	- 表被一次截断，物理删除\r\n	- 优点：效率高\r\n	- 缺点：不支持回滚\r\n\r\n```SQL\r\ntruncate table dept_bak;\r\n```\r\n\r\n# 15、约束\r\n\r\n## 15.1 非空约束 not null\r\n\r\n> **非空约束not null约束的字段不能为NULL**\r\n\r\n```SQL\r\ncreate table t_vip(\r\n	id int,\r\n	name varchar(255) not null  // not null只有列级约束，没有表级约束！\r\n);\r\n```\r\n\r\n## 15.2 唯一性约束 unique\r\n\r\n> **唯一性约束unique约束的字段不能重复，但是可以为NULL**\r\n\r\n```SQL\r\ncreate table t_vip(\r\n	id int,\r\n	name varchar(255) unique,\r\n	email varchar(255)\r\n);\r\n\r\n# 约束没有添加在列的后面，这种约束被称为表级约束。\r\ncreate table t_vip(\r\n	id int,\r\n	name varchar(255),\r\n	email varchar(255),\r\n	unique(name,email)\r\n);\r\n```\r\n\r\n> mysql中，一个字段同时被not null和unique约束，该字段自动变成主键字段\r\n\r\n## 15.3 主键约束\r\n\r\n> **任何一张表都应该有主键，没有主键，表无效**\r\n\r\n```SQL\r\n# 列级约束\r\ncreate table t_vip(\r\n	id int primary key,\r\n	name varchar(255)\r\n);\r\n\r\n# 表级约束\r\ncreate table t_vip(\r\n	id int,\r\n	name varchar(255),\r\n	primary key(id)\r\n);\r\n\r\n# 复合主键\r\ncreate table t_vip(\r\n	id int,\r\n	name varchar(255),\r\n	email varchar(255),\r\n	primary key(id,name)\r\n);\r\n\r\n# 主键值自增\r\nauto_increment\r\n```\r\n\r\n> 在实际开发中不建议使用复合主键。建议使用单一主键\r\n\r\n## 15.4 外键约束\r\n\r\n```SQL\r\n# 请设计数据库表，来描述“班级和学生”的信息\r\n# 方案：班级一张表、学生一张表\r\n\r\nt_class 班级表\r\nclassno(pk)			classname\r\n--------------------------------------------------------------------\r\n100					北京市大兴区亦庄镇第二中学高三1班\r\n101					北京市大兴区亦庄镇第二中学高三2班\r\n\r\nt_student 学生表\r\nno(pk)			name				cno(FK引用t_class这张表的classno)\r\n--------------------------------------------------------------------\r\n1				jack				100\r\n2				lucy				100\r\n3				lilei				100\r\n4				hanmeimei			100\r\n5				zhangsan			101\r\n6				lisi				101\r\n7				wangwu				101\r\n8				zhaoliu				101\r\n\r\n# t_class是父表、t_student是子表\r\n# 被引用的这个字段不一定是主键，但至少具有unique约束\r\n```\r\n\r\n> 外键值可以为NULL\r\n\r\n# 16、存储引擎\r\n\r\n## 16.1 命令\r\n\r\n```SQL\r\n# 指定“存储引擎”\r\nENGINE=InnoDB DEFAULT CHARSET=utf8\r\n\r\n# mysql默认的存储引擎是：InnoDB\r\n# 查看mysql支持哪些存储引擎\r\nshow engines \\G\r\n```\r\n\r\n## 16.2 常用引擎\r\n\r\n### 16.2.1 MyISAM\r\n\r\n- 特征\r\n	- 使用3个文件表示每个表\r\n		- 格式文件 — 存储表结构的定义（mytable.frm）\r\n		- 数据文件 — 存储表行的内容（mytable.MYD）\r\n		- 索引文件 — 存储表上索引（mytable.MYI）\r\n- 特点\r\n	- 可被转换为压缩、只读表来节省空间\r\n	- 不支持事务\r\n\r\n### 16.2.2 InnoDB\r\n\r\n- 特征\r\n	- 每个 InnoDB 表在数据库目录中以.frm 格式文件表示\r\n	– InnoDB 表空间 tablespace 被用于存储表的内容\r\n	– **提供一组用来记录事务性活动的日志文件**\r\n	- 支持事务处理\r\n	- 提供全 ACID 兼容\r\n	- 在 MySQL 服务器崩溃后提供自动恢复\r\n	- 多版本（MVCC）和行级锁定\r\n	支持外键及引用的完整性，包括级联删除和更新\r\n- 特点\r\n	- 支持事务\r\n	- 不能压缩，不能转换为只读\r\n\r\n### 16.2.3 MEMORY\r\n\r\n- 特征\r\n	- 在数据库目录内，每个表均以.frm 格式的文件表示\r\n	– 表数据及索引被存储在内存中\r\n	– 表级锁机制\r\n	– 不能包含 TEXT 或 BLOB 字段\r\n- 特点\r\n	- 查询效率是最高的\r\n	- 不安全，关机之后数据消失\r\n\r\n# 17、事务\r\n\r\n> **一个事务其实就是一个完整的业务逻辑，是一个最小的工作单元，不可再分。**\r\n\r\n## 17.1 提交、回滚事务\r\n\r\n> 只有DML语句才有事务，事务存在事务性活动日志文件中\r\n\r\n```SQL\r\n# 提交事务：commit;\r\n# 回滚事务：rollback;\r\n# mysql默认情况下是支持自动提交事务的。（自动提交）\r\n```\r\n\r\n```SQL\r\n# 回滚事务\r\nstart transaction;\r\n...\r\nrollback;\r\n\r\n# 提交事务\r\nstart transaction;\r\n...\r\ncommit;\r\n```\r\n\r\n## 17.2 事务的4个特性\r\n\r\n1. A:原子性\r\n	- 说明事务是最小的工作单元。不可再分\r\n2. C:一致性\r\n	- 在同一个事务当中，所有操作必须同时成功，或者同时失败\r\n3. I:隔离性\r\n	- A事务和B事务之间具有一定的隔离\r\n4. D:持久性\r\n	- 事务最终结束的一个保障\r\n\r\n## 17.3 事务的4个隔离级别\r\n\r\n### 17.3.1 读未提交：read uncommitted\r\n\r\n- 事务A可以读取到事务B未提交的数据\r\n- 脏读现象(Dirty Read)\r\n- 大多数的数据库隔离级别都是read committed\r\n\r\n### 17.3.2 读已提交：read committed\r\n\r\n- 事务A只能读取到事务B提交之后的数据\r\n- 解决了脏读的现象\r\n- 不可重复读取数据\r\n- 每一次读到的数据是绝对的真实\r\n- oracle数据库默认的隔离级别\r\n\r\n### 17.3.3 可重复读：repeatable read\r\n\r\n- 事务A开启之后，不管是多久，每一次在事务A中读取到的数据都是一致的\r\n- 解决了不可重复读取数据\r\n- 可能会出现幻影读\r\n- mysql中默认的事务隔离级别\r\n\r\n### 17.3.4 序列化/串行化：serializable\r\n\r\n- 效率最低\r\n- 事务排队，不能并发\r\n- 每一次读取到的数据都是最真实的\r\n\r\n### 17.3.5 相关命令\r\n\r\n```SQL\r\n# 查看隔离级别\r\nSELECT @@tx_isolation\r\n\r\n# 设置隔离级别\r\nset global transaction isolation level read uncommitted;\r\n```\r\n\r\n# 18、索引 index\r\n\r\n## 18.1 机制与原理\r\n\r\n**MySQL在查询方面主要就是两种方式**\r\n	- 全表扫描\r\n	- 根据索引检索\r\n\r\n**mysql数据库当中索引也是需要排序的**\r\n\r\n> **在mysql当中索引是一个B-Tree数据结构，遵循左小又大原则存放。采用中序遍历方式遍历取数据**\r\n\r\n- **在任何数据库当中主键上都会自动添加索引对象**\r\n- **在mysql当中，一个字段上如果有unique约束的话，也会自动创建索引对象**\r\n- 任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号\r\n- 在InnoDB存储引擎中索引存储在一个逻辑名称叫做tablespace中\r\n\r\n**什么条件下，我们会考虑给字段添加索引呢**\r\n1. 数据量庞大\r\n2. 该字段经常出现在where的后面，以条件的形式存在\r\n3. 该字段很少的DML(insert delete update)操作，因为DML之后，索引需要重新排序\r\n\r\n## 18.2 创建与删除\r\n\r\n```SQL\r\n# 创建索引\r\ncreate index emp_ename_index on emp(ename);\r\n# 给emp表的ename字段添加索引，起名：emp_ename_index\r\n\r\n# 删除索引\r\ndrop index emp_ename_index on emp;\r\n将emp表上的emp_ename_index索引对象删除\r\n\r\n# 查看一个SQL语句是否使用了索引\r\nexplain select ...;\r\n```\r\n\r\n## 18.3 索引失效\r\n\r\n**1. 模糊匹配当中以“%”开头**\r\n- 尽量避免模糊查询的时候以“%”开始，优化的策略\r\n\r\n**2. 使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有索引**\r\n\r\n**3. 使用复合索引的时候，没有使用左侧的列查找**\r\n- 复合索引:两个字段，或者更多的字段联合起来添加一个索引\r\n\r\n**4. 在where当中索引列参加了运算**\r\n\r\n**5. 在where当中索引列使用了函数**\r\n\r\n> **索引是各种数据库进行优化的重要手段。优化的时候优先考虑的因素就是索引**\r\n\r\n# 19、视图\r\n\r\n> **只有DQL语句才能以view的形式创建**\r\n\r\n```SQL\r\n# 表复制\r\ncreate table dept2 as select * from dept;\r\n# 创建视图对象\r\ncreate view dept2_view as select * from dept2;\r\n# 删除视图对象\r\ndrop view dept2_view;\r\n```\r\n\r\n> 视图的特点：通过对视图的操作，会影响到原表数据\r\n\r\n**视图的作用:方便，简化开发，利于维护**\r\n\r\n# 20、数据库设计三范式\r\n\r\n- **第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分**\r\n	- 最核心，最重要的范式\r\n	- 必须有主键，并且每一个字段都是原子性不可再分\r\n\r\n- **第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖**\r\n	- 建立在第一范式的基础之上\r\n	- 要求所有非主键字段必须完全依赖主键，不要产生部分依赖\r\n\r\n- **第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖**\r\n	- 第三范式建立在第二范式的基础之上\r\n	- 要求所有非主键字典必须直接依赖主键，不要产生传递依赖\r\n\r\n## 20.1 表的设计\r\n\r\n- 一对多\r\n	- 一对多，两张表，多的表加外键\r\n\r\n- 多对多\r\n	- 多对多，三张表，关系表两个外键\r\n\r\n- 一对一\r\n	- 一对一，外键唯一\r\n\r\n## 20.2 三范式在实际开发中的现象\r\n\r\n- 数据库设计三范式是理论上的\r\n- **实践和理论有的时候有偏差**\r\n- 有的时候会拿冗余换执行速度\r\n- **表和表之间连接次数越多，效率越低 (笛卡尔积现象)**\r\n- 有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的\r\n- 对于开发人员来说，sql语句的编写难度也会降低', '2022-08-05 22:14:10', 'https://img2.baidu.com/it/u=3984176857,3644579044&fm=253&fmt=auto&app=138&f=JPEG?w=690&h=457', '原创', '', '', '', 'MySQL学习笔记', '2022-08-10 20:34:39', '72', '142', '1', '条件查询、模糊查询、排序、单行多行函数、连接查询、子查询、union、limit分页查询、DDL语句、MySQL数据类型、DML语句、日期格式化、约束、存储引擎、事务、索引、视图、数据库设计三范式');
INSERT INTO `t_detail` VALUES ('222', '', '', '# 1、Linux后台运行项目\r\n\r\n```bash\r\nnohup java -jar xxxx.jar &\r\n```\r\n## 1.2 结束进程\r\n\r\n```bash\r\nps auxwww | grep xxx.jar # 查找进程PID\r\nkill -9 [PID]\r\n```\r\n\r\n# 2、Spring Boot项目打包\r\n\r\n## 2.1 打war包\r\n\r\n```xml\r\n<!-- pom文件中禁用内置tomcat依赖 -->\r\n <dependency>\r\n 	<groupId>org.springframework.boot</groupId>\r\n 	<artifactId>spring-boot-starter-web</artifactId>\r\n 	<exclusions>\r\n 		<exclusion>\r\n 			<groupId>org.springframework.boot</groupId>\r\n 			<artifactId>spring-boot-starter-tomcat</artifactId>\r\n 		</exclusion>\r\n 	</exclusions>\r\n </dependency>\r\n```\r\n\r\n```java\r\n/*\r\n项目启动类中继承SpringBootServletInitializer类\r\n重写configure(SpringApplicationBuilder builder)方法\r\n*/\r\n@SpringBootApplication\r\npublic class BlogApplication extends SpringBootServletInitializer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(BlogApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\r\n        return builder.sources(BlogApplication.class);\r\n    }\r\n}\r\n```\r\n\r\n## 2.2 打jar包\r\n\r\n```xml\r\n<!-- 使用Spring Boot内置Tomcat -->\r\n <dependency>\r\n 	<groupId>org.springframework.boot</groupId>\r\n 	<artifactId>spring-boot-starter-web</artifactId>\r\n 	<!--<exclusions>\r\n 		<exclusion>\r\n 			<groupId>org.springframework.boot</groupId>\r\n 			<artifactId>spring-boot-starter-tomcat</artifactId>\r\n 		</exclusion>\r\n 	</exclusions>-->\r\n </dependency>\r\n```\r\n\r\n```java\r\n/*\r\n启动类不需要继承重写\r\n*/\r\n@SpringBootApplication\r\npublic class BlogApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(BlogApplication.class, args);\r\n    }\r\n}\r\n```\r\n', '2022-08-06 21:39:28', 'https://img2.baidu.com/it/u=1049288864,2979655730&fm=253&fmt=auto&app=138&f=JPEG?w=300&h=300', '原创', '', '', '', 'Spring Boot打包配置与Linux下的部署运行', '2022-08-10 17:21:11', '21', '220', '1', 'Spring Boot项目打war包和jar包需要修改的地方和Linux中部署的设置');
INSERT INTO `t_detail` VALUES ('219', '', '', '# 1、安装依赖包、创建mysql用户及用户组\r\n\r\n```bash\r\nyum search libaio           # 查找依赖包\r\nyum -y install libaio       # 安装libaio依赖包\r\nyum -y install libncurses*  # 安装libncurses* 依赖\r\n```\r\n> **创建mysql用户及用户组**\r\n\r\n```bash\r\ngroupadd mysql            					   #创建mysql用户组\r\nuseradd -r -g mysql -s /bin/false mysql		   #创建系统用户mysql并加入mysql用户组\r\n```\r\n\r\n# 2、下载解压\r\n\r\n```bash\r\nmkdir /mysql\r\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz\r\ntar -zxvf mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz\r\n\r\n# 重命名\r\nmv mysql-5.7.33-linux-glibc2.12-x86_64 mysql\r\n\r\n# 将mysql文件夹移动到/根目录\r\nmv mysql /\r\n```\r\n\r\n# 3、创建mysql-files并授权\r\n\r\n```bash\r\nmkdir /mysql/mysql-files\r\n\r\n# 更改权限\r\nchown mysql:mysql mysql-files\r\nchmod 750 mysql-files\r\n```\r\n\r\n# 4、安装并初始化\r\n\r\n```bash\r\n./bin/mysqld --initialize --user=mysql  --basedir=/mysql\r\n```\r\n\r\n> 初始化会生成初始密码\r\n\r\n# 5、修改脚本和数据库密码\r\n\r\n```bash\r\nvim support-files/mysql.server\r\n\r\nbasedir=/mysql\r\ndatadir=/mysql/data\r\n\r\n# 启动登录数据库\r\n./support-files/mysql.server start\r\n/bin/mysql -u root -p\r\n\r\n# 修改密码\r\nSET PASSWORD = PASSWORD(\'123456\');\r\n\r\n# 禁用密码过期\r\nALTER USER \'root\'@\'localhost\' PASSWORD EXPIRE NEVER;\r\n\r\n# 刷新系统权限\r\nflush privileges;\r\n```\r\n\r\n# 6、 添加进程、环境变量、服务\r\n\r\n```bash\r\n# 添加进程\r\ncp support-files/mysql.server /etc/init.d/mysql\r\n# 添加好后。可以用命令service mysql start 开启服务，service mysql stop关闭服务\r\n\r\n# 最后我们在/etc/profile里面添加mysql环境变量\r\nvim /etc/profile\r\nexport PATH=$PATH:/mysql/bin\r\nsource /etc/profile # 保存，立即生效\r\n```\r\n\r\n# 7、转载链接\r\n[点击跳转](https://blog.csdn.net/weixin_52270081/article/details/118033275 \"点击跳转\")', '2022-08-06 20:58:27', 'https://img2.baidu.com/it/u=3984176857,3644579044&fm=253&fmt=auto&app=138&f=JPEG?w=690&h=457', '转载', '', '', '', 'MySQL在Linux下的安装部署配置', '2022-08-10 17:21:06', '12', '220', '1', '基于CentOS系统安装MySQL 5.7.33 Generic版本');
INSERT INTO `t_detail` VALUES ('223', '', '', '# 数据类型\r\n\r\n### 八种基本数据类型\r\n```java\r\nbyte short int long float double boolean char\r\n```\r\n### 数据类型分别占用内存量\r\n```java\r\nbyte:1字节 short：2字节 int：4字节 long：8字节\r\nfloat：4字节 double：8字节\r\nboolean：1字节\r\nchar：2字节\r\n```\r\n### 几种数据类型取值范围\r\n```java\r\nbyte[-128,127]\r\nshort[-32768,32767]\r\nint[-2147483648,2147483647]\r\nchar[0,65535]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n### 数据类型转换规则\r\n```java\r\n	一、八种基本数据类型中除 boolean 类型不能转换之外\r\n		其余七种类型之间都可以进行转换\r\n\r\n	二、如果整数型字面量没有超过 byte  short char 的取值范围\r\n		可以直接赋值\r\n\r\n	三、小容量向大容量转换称为，自动类型转换 容量从小到大排序为\r\n		byte < short(char) < int < long < float < double\r\n		其中short char都占用2字节  但char可以表示更大的正整数\r\n\r\n	四、大容量向小容量转换称为，强制类型转换，编写时必须添加“强制类型转换符”\r\n		（数据类型）	但运行时可能出现精度损失\r\n\r\n	五、 byte short char 做混合运算时，先各自转换成int再做运算\r\n\r\n	六、多种类型混合运算，先各自转换成容量最大的那一种再做计算\r\n```\r\n### 关于Java中的转义字符\r\n```java\r\n	1、\\t 是tab\r\n	2、\\n 是换行\r\n	3、\\\'表示一个普通的\'字符\r\n	4、\\u 表示后面的是一个文字的Unicode编码\r\n```\r\n### 整数型数据\r\n```java\r\n	整数型在Java中共四种类型\r\n		byte	1个字节\r\n		short	2个字节\r\n		int		4个字节\r\n		long	8个字节\r\n	\r\n		1字节=8bit=8个二进制位\r\n\r\n		对于以上四类，最常用的是int\r\npublic class integer{\r\n	public static void main(String[] args){\r\n	\r\n	}\r\n}\r\n		int a=100;\r\n\r\n	 在Java中，整数型字面量默认当作int类型\r\n	 要想它被当作“long”需要在字面量后面添加L\r\n\r\n		long x=500L;\r\n		//500L就是long类型字面量	不存在转换\r\n\r\n\r\n		long c=200;\r\n		//存在类型转换  200是整数会被默认当成int类型处理\r\n		//int4字节  long8字节  这是小容量转大容量\r\n		//小容量可以直接赋值给大容量	\r\n		//这叫做自动类型转换\r\n\r\n		long e=2147483648;\r\n		//会报错  整数被默认当成int  超过int取值范围就不行了\r\n		//后面+L解决\r\n\r\n\r\n		long c2=100L;\r\n\r\n		int y=c2;\r\n		//long 占8字节 int 占4字节   大容量不能直接赋值给小容量	编译报错\r\n	\r\n\r\n		//要想编译通过  必须加强制类型转换符	通过后运行时可能还是会损失精度\r\n\r\n		int y=(int)c2;  //括号内+类型  就是强制类型转换符\r\n```\r\n### 浮点型数据\r\n```java\r\n\r\n	关于Java语言中的浮点型数据\r\n			float：		4字节	单精度\r\n			double：	8字节	双精度\r\n		double更精确\r\n\r\n		10/3采用float存储	结果可能是3.333\r\n		10/3采用double存储  结果可能是3.33333333\r\n\r\n\r\n		在Java中还有一种精度更高的类型专门用于财务软件\r\n		Java.math.BigDecimal（属于引用数据类型）\r\n\r\n		float和double存储数据存储的都是近似值\r\n		有无限循环数据  但计算机内存有限\r\n\r\n		long类型占用8字节\r\n		float类型占用4字节\r\n			注意：任意一个浮点型数据都比整数型数据大\r\n		\r\n		Java中规定：任何一个浮点型数据默认被当成double处理\r\n		想让浮点型字面量被当作float处理   需要在后面+F \r\n\r\n```\r\n\r\n### 关于原码反码补码\r\n```java\r\n\r\n	 对于一个正数来说，原码，反码，补码是同一个完全相同\r\n	 byte b=1   \r\n	 原码 反码 补码 都是：00000001\r\n\r\n	 对于一个负数\r\n	 byte v=1\r\n	 原码：10000001\r\n	 反码（符号位不变，其他取反）：11111110\r\n	 补码（反码+1）：11111111\r\n```\r\n\r\n', '2022-08-07 21:24:26', 'https://tse2-mm.cn.bing.net/th/id/OIP-C.mevZbIlLd8lUQeCnR9GvOQAAAA?w=259&h=164&c=7&r=0&o=5&dpr=1.25&pid=1.7', '原创', '', '', '', 'JavaSE基础笔记（1）', '2022-08-15 10:28:46', '142', '236', '2', '数据类型');
INSERT INTO `t_detail` VALUES ('225', '', '', '1', '2022-08-07 23:16:51', 'https://img2.baidu.com/it/u=3417725755,2792366265&fm=253&fmt=auto&app=138&f=JPEG?w=700&h=400', '原创', '', '', '', 'Spring Boot学习笔记', '2022-08-10 17:21:19', '8', '140', '1', 'Spring Boot学习笔记');
INSERT INTO `t_detail` VALUES ('226', '', '', '### 3306端口检查\r\n\r\n```SQL\r\nfirewall-cmd --list-ports   # 查看端口\r\n```\r\n\r\n### 如果没有启动\r\n\r\n```SQL\r\nfirewall-cmd --permanent --zone=public --add-port=3306/tcp  # 添加3306端口\r\n```\r\n\r\n### 重启防火墙\r\n\r\n```SQL\r\nfirewall-cmd --reload\r\n```\r\n\r\n### 设置允许哪些IP访问\r\n\r\n```SQL\r\ngrant all privileges  on *.* to root@\'%\' identified by \"password\";\r\n# 参数说明：（root是用户，password登录密码，%代表允许所有ip；输入自己ip则只允许自己）\r\nflush privileges;   #  刷新权限\r\n```\r\n\r\n### [原文链接](https://blog.csdn.net/u012322399/article/details/125944671?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-125944671-blog-123447955.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-125944671-blog-123447955.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1 \"原文链接\")', '2022-08-08 08:15:35', 'https://img0.baidu.com/it/u=2305131239,1391401421&fm=253&fmt=auto&app=120&f=JPEG?w=750&h=300', '转载', '', '', '', '在本地连接服务器上的MySQL', '2022-08-10 17:21:29', '14', '142', '1', '在本地连接服务器上的MySQL');
INSERT INTO `t_detail` VALUES ('230', '', '', '# 1、常用命令\r\n\r\n```bash\r\n# 重启服务\r\n./nginx -s reload\r\n\r\n# 强制停止服务\r\n# 查看进程\r\nps -ef|grep nginx\r\n# 停止进程\r\nkill -TERM xxxx\r\n# 或\r\npkill -9 nginx\r\n```\r\n\r\n# 2、配置文件优先级\r\n\r\n```bash\r\n# 设置输出格式为文本\r\ndefault_type text/html;\r\n\r\n# = 最高优先级，表示路径完全等于\r\nlocation = /demo1/a/b {\r\n	echo \"= /demo1/a/b\";\r\n}\r\n\r\n# ^~ 第二高优先级，表示以它开头\r\nlocation ^~ /demo1/a {\r\n	echo \"^~ /demo1/a\";\r\n}\r\n\r\n# ~ 第三高优先级，正则表达式。如果要用{}，则需要整个添加引号\r\n# 正则拓展：~* 不区分大小写正则、!~ 正则不匹配的、!~* 不分大小写的正则不匹配的\r\nlocation \"~ /demo1/\\w{3}&\" {\r\n	echo \"regex\";\r\n}\r\n\r\n# 优先级最低，没有前置符号\r\nlocation /demo1 {\r\n	echo \"^~ /demo1/a\";\r\n}\r\n```\r\n\r\n> **优先级相同选择匹配程度最高的，匹配程度也相同，先执行的生效**\r\n\r\n# 3、生命周期\r\n\r\n```bash\r\n# 重要的3个生命周期\r\n# rewrite -> access -> content\r\n\r\n# rewrite重写url\r\nlocation /demo4 {\r\n	# 一般放到最后一行\r\n	rewrite ^/(.*) /$1/api; # 不写状态码，url不会更改\r\n}\r\nlocation /demo4/api{\r\n	echo \"/demo4/api\";\r\n}\r\n\r\n# access在rewrite后执行\r\n# 禁止所有IP访问\r\ndeny all\r\n\r\n# content最后执行\r\n# 打印输出\r\necho \"aha\";\r\n```\r\n\r\n# 4、负载均衡\r\n\r\n```bash\r\n# 反向代理\r\nlocation / {\r\n	proxy_pass http://group1/;\r\n}\r\n\r\n# 设置负载均衡\r\nupstream group1 {\r\n	server localhost:8081 weight=5;\r\n	server localhost:8080 weight=5;\r\n}\r\n# weight为负载均衡的权重\r\n```\r\n\r\n# 5、Nginx配置文件\r\n```bash\r\n# 只启动一个进程，nginx是多进程单线程模型，但是使用了epoll sednfile 非阻塞io\r\nworker_processes  1;\r\n\r\n# 网络连接相关配置\r\nevents {\r\n	# 每个worker能连接1024个连接\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       mime.types;		# 文件扩展名与文件类型映射表\r\n    default_type  text/html;		# 默认的返回类型，可以再server.location里面更改\r\n    sendfile        on;				# 开启sendfile系统调用\r\n    keepalive_timeout  65;			# 连接超时时间\r\n\r\n	# 负载均衡 weight=1 权重\r\n	upstream group1 {\r\n		server localhost:8081 weight=5;\r\n		server localhost:8080 weight=5;\r\n	}\r\n\r\n    server {\r\n        listen       80;\r\n\r\n		# = 最高优先级，表示路径完全等于\r\n		location = /demo1/a/b {\r\n			echo \"= /demo1/a/b\";\r\n		}\r\n\r\n		# ^~ 第二高优先级，表示以它开头\r\n		location ^~ /demo1/a {\r\n			echo \"^~ /demo1/a\";\r\n		}\r\n\r\n		# ~ 第三高优先级，正则表达式。如果要用{}，则需要整个添加引号\r\n		# 正则拓展：~* 不区分大小写正则、!~ 正则不匹配的、!~* 不分大小写的正则不匹配的\r\n		location \"~ /demo1/\\w{3}&\" {\r\n			echo \"regex\";\r\n		}\r\n\r\n		# 最低优先级，没有前置符号\r\n		location /demo1 {\r\n			echo \"^~ /demo1/a\";\r\n		}\r\n\r\n		# rewrite重写url\r\n		location /demo4 {\r\n\r\n			# 一般放到最后一行\r\n			rewrite ^/(.*) /$1/api; # 不写状态码，url不会更改\r\n		}\r\n		location /demo4/api{\r\n			echo \"/demo4/api\";\r\n		}\r\n\r\n		# 反向代理\r\n		location /demo5 {\r\n			proxy_pass http://group1/;\r\n		}\r\n\r\n    }\r\n}\r\n```', '2022-08-10 23:14:36', 'https://img1.baidu.com/it/u=2951165593,2604482398&fm=253&fmt=auto&app=138&f=GIF?w=620&h=200', '原创', '', '', '', 'Nginx学习笔记', '2022-08-14 17:13:44', '25', '218', '1', 'Nginx常用命令、配置文件优先级、生命周期、负载均衡、Nginx配置文件');
INSERT INTO `t_detail` VALUES ('245', '', '', '# 运算符\r\n## 主要掌握类型\r\n```java\r\n算数运算符	关系运算符	逻辑运算符	赋值运算符	条件运算符（三目运算符）\r\n字符串连接运算符\r\n```\r\n## 算术运算符\r\n```java\r\n算数运算符：\r\n	+	求和\r\n	-	相减\r\n	*	乘积\r\n	/	商\r\n	%求余数（求模）\r\n\r\n	++	自加1\r\n	--	自减1\r\n\r\n	对于++：++可以出现在变量前，也可以出现在变量后  \r\n			执行结束后，变量都是自加1\r\n			\r\npublic class Operator01{\r\n	public static void main(String[] args){\r\n		int a=50;\r\n		int b=65;\r\n	System.out.println(a+b);//115\r\n	System.out.println(a-b);//-15\r\n	System.out.println(a*b);//3250\r\n	System.out.println(a/b);//0\r\n	System.out.println(a%b);//50\r\n\r\n	//++ 自加1（++可以出现在变量前，也可以出现在变量后）\r\n	int i=10;\r\n	//i变量自加1\r\n	i++;\r\n	System.out.println(i);//11\r\n\r\n	//语法：当++出现在变量后，会先做赋值运算\r\n	int m=10;\r\n	int n=m++;\r\n	System.out.println(m);//11  有m++就会自加1\r\n	System.out.println(n);//10	先做了赋值\r\n\r\n	//语法：当++现在变量前，会先做自加1运算\r\n\r\n	int c=90;\r\n	System.out.println(c++);//90 这里有个隐形的赋值运算\r\n	拆分：\r\n	int c1=90;\r\n	int c2=c1++;\r\n	}\r\n}\r\n```\r\n## 关系运算符\r\n```java\r\n关系运算符\r\n	<\r\n	<=\r\n	>\r\n	>=\r\n	==\r\n	!=(不等)\r\n\r\n	规则：所有关系运算符的运算结果都是布尔类型\r\n			不是true就是false\r\n		\r\n	在Java中：\r\n		=：赋值运算符\r\n		==：关系运算符  判断是否相等 \r\npublic class Operator02{\r\n	public static void main(String[] args){\r\n		int a=10;\r\n		int b=20;\r\n		System.out.println(a<b);//true\r\n		System.out.println(a<=b);//true\r\n		System.out.println(a>b);//false\r\n		System.out.println(a>=b);//false\r\n		System.out.println(a==b);//false\r\n		System.out.println(a!=b);//true\r\n	\r\n	}\r\n}\r\n```\r\n## 逻辑运算符\r\n```java\r\n逻辑运算符\r\n		&	逻辑与（可翻译成并且）\r\n		|	逻辑或（可翻译成或者）\r\n		！	逻辑非（取反）\r\n		&&	短路与\r\n		||	短路或\r\n\r\n	牢记：逻辑运算符两边都要求是布尔类型，并且最终运算结果也是布尔类型\r\n			这是逻辑运算符的特点\r\n\r\n	规则：有真或真  有假且假\r\n	\r\n	public class Operator03{\r\n	public static void main(String[] args){\r\n	//有真或真  有假且假\r\n	System.out.println(true & true);//真\r\n	System.out.println(true & false);//假\r\n	System.out.println(false & false);//假\r\n\r\n\r\n\r\n	关于短路与&&，短路或||：\r\n		短路与&& 和逻辑与&的运算结果没有任何区别，完全相同。\r\n		只不过短路与&& 会发生”短路现象“\r\n\r\n	int m=10;\r\n	int n=11;\r\n	System.out.println(m>n && m>n++);\r\n	//因为m>n为假  所以整个表达式结果为假  因此m>n++不执行了  效率更高\r\n	当短路与&&左边的表达式为false时  右边表达式不执行\r\n	这种现象被称为短路现象\r\n\r\n	大部分情况建议使用短路与\r\n\r\n\r\n	短路或||则是当左边表达式为true时 右边表达式不执行 会短路\r\n	}\r\n}			\r\n```\r\n## 赋值运算符\r\n```java\r\n赋值运算符：\r\n	1、包括”基本赋值运算符“和”扩展赋值运算符“\r\n	2、基本：=\r\n	3、扩展：+= -+ *+ /+ %=（求余数等）\r\n \r\n	重要语法规则：\r\n	使用扩展赋值运算符时永远不会改变  运算的数据类型\r\npublic class Operator03{\r\n	public static void main(String[] args){\r\n	int k=10;\r\n	k +=20;//k变量追加20\r\n	System.out.println(k);\r\n	+=类似于 先+再赋值\r\n	\r\n		\r\n	//k=k+10 和 k+=10 不一样\r\n	k+=10 和  k=(int)(k+10)一样\r\n	}\r\n}\r\n```\r\n## 条件运算符\r\n```java\r\n条件运算符：（三目运算符）\r\n	语法格式：\r\n		布尔表达式？表达式1：表达式2\r\n	执行原理：\r\n		布尔表达式的结果为true时，表达式1的执行结果作为整个表达式的结果\r\n		布尔表达式的结果为false时，表达式2的执行结果为整个表达式结果\r\n\r\npublic class Operator05{\r\n	public static void main (String[] args){\r\n	boolean sex=false;\r\n	\r\n	//前面变量c的类型不能随便写 \r\n	//最终结果是字符型	所以变量要用char\r\n	char c= sex? \'男\':\'女\';\r\n	System.out.println(c);\r\n	//因为sex赋值为 false 所以c的值为女\r\n	\r\n	sex=true;//重新赋值\r\n	System.out.println(sex?\'男\':\'女\');// 结果就为男\r\n	\r\n	\r\n	}\r\n}\r\n```\r\n## 关于字符串连接运算符\r\n```java\r\n+运算符\r\n	1、+运算符在Java语言中有两个作用\r\n		作用1：求和\r\n		作用2：字符串拼接\r\n	2、\r\n		什么时候求和？\r\n			当+运算符两边都是数字类型时\r\n		什么时候进行字符串拼接？\r\n			当+运算符两边的”任意一边“是字符串类型时\r\n		\r\n	3、字符串拼接完还是字符串\r\n	public class Operator06{\r\n	 public static void main(String[] args){\r\n	 //定义一个年龄变量\r\n	 int nianLing=35;\r\n	//这里+就进行拼接	\r\n	 System.out.println(\"年龄\"+nianLing);//年龄=35\r\n\r\n	int a=200;\r\n	int b=500;\r\n	int c=a+b;//这里是做求和\r\n\r\n	System.out.println(c);\r\n	//当一个表达式有多个加号的时候\r\n	//遵循自左向右的顺序依次执行\r\n	//所以这里是 先求和  再拼接  最终结果是字符串300110\r\n	System.out.println(a+b+\"110\");\r\n	\r\n	//如何在控制台输出”200+500=700“\r\n	//让加号全部做拼接\r\n	System.out.println(a+\"+\"+b+\"=\"+700);\r\n\r\n	//在Java中定义字符串类型变量\r\n	 String name=\"tony\";\r\n	\r\n	 System.out.println(\"登陆成功欢迎\"+name+\"回来！\");\r\n	 //口诀：加一个双引号\"\",然后双引号中间加两个加号\"++\"\r\n	 //然后两个加号中间加变量名\"+变量名+\"\r\n	 }\r\n }\r\n```', '2022-08-15 09:16:35', 'https://tse2-mm.cn.bing.net/th/id/OIP-C.mevZbIlLd8lUQeCnR9GvOQAAAA?w=259&h=164&c=7&r=0&o=5&dpr=1.25&pid=1.7', '', '', '', '', 'JavaSE基础笔记（2）', '2022-08-15 11:34:23', '37', '236', '2', '运算符');
INSERT INTO `t_detail` VALUES ('231', '', '', '# 1、引入依赖\r\n\r\n```xml\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-aop</artifactId>\r\n</dependency>\r\n```\r\n\r\n# 2、创建Service层\r\n\r\n```java\r\npackage com.service;\r\n\r\npublic interface UserService {\r\n\r\n    void save(String name);\r\n\r\n    void delete(Integer id);\r\n\r\n    void update(String name);\r\n\r\n    String find(String name);\r\n}\r\n```\r\n\r\n```java\r\npackage com.service.impl;\r\n\r\nimport com.annotations.MyAdvice;\r\nimport com.service.UserService;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class UserServiceImpl implements UserService {\r\n\r\n    @Override\r\n    public void save(String name) {\r\n        System.out.println(\"save access\");\r\n    }\r\n\r\n    @Override\r\n    public void delete(Integer id) {\r\n        System.out.println(\"delete access\");\r\n    }\r\n\r\n    @Override\r\n    public void update(String name) {\r\n        System.out.println(\"update access\");\r\n    }\r\n\r\n    @Override\r\n    @MyAdvice // 使用自定义切面\r\n    public String find(String name) {\r\n        System.out.println(\"find access\");\r\n        return name;\r\n    }\r\n}\r\n```\r\n\r\n# 3、创建AOP配置类\r\n\r\n```java\r\npackage com.config;\r\n\r\nimport org.aspectj.lang.JoinPoint;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.After;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.aspectj.lang.annotation.Before;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n/**\r\n * 自定义切面配置类\r\n */\r\n@Configuration  // 代表当前类是spring配置类\r\n@Aspect         // 代表当前类是切面配置类\r\npublic class MyAspectConfig {\r\n\r\n    // value:配置生效路径\r\n    // JoinPoint 连接点:获取执行aop的类信息\r\n    @Before(\"execution(* com.service.*.*(..))\")\r\n    public void before(JoinPoint joinPoint){\r\n        System.out.println(\"=========前置附加操作=========\");\r\n        System.out.println(\"当前执行目标类:\" + joinPoint.getTarget());\r\n        System.out.println(\"当前执行目标类中的方法:\" + joinPoint.getSignature().getName());\r\n    }\r\n\r\n    @After(\"execution(* com.service.*.*(..))\")\r\n    public void after(JoinPoint joinPoint){\r\n        System.out.println(\"=========后置附加操作=========\");\r\n        System.out.println(\"当前执行目标类:\" + joinPoint.getTarget());\r\n        System.out.println(\"当前执行目标类中的方法:\" + joinPoint.getSignature().getName());\r\n    }\r\n\r\n    /**\r\n     * 环绕: 先执行环绕前置操作，放行之后继续执行Before、核心业务、After。最后再进入环绕后置操作\r\n     * ProceedingJoinPoint 正在处理中的连接点\r\n     * 返回值的作用: 把业务方法返回结果返回给调用者\r\n     */\r\n    @Around(\"execution(* com.service.*.*(..))\")\r\n    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\r\n        System.out.println(\"=========环绕的前置操作=========\");\r\n        System.out.println(\"当前执行类:\" + proceedingJoinPoint.getTarget());\r\n        System.out.println(\"方法名:\" + proceedingJoinPoint.getSignature().getName());\r\n        // 放行目标方法\r\n        Object proceed = proceedingJoinPoint.proceed();\r\n        System.out.println(\"=========环绕的后置操作=========\");\r\n        return proceed;\r\n    }\r\n\r\n    /**\r\n     * 切入点表达式:  execution 方法级别切入点\r\n     *                  execution(* com.service.*.*(..))\r\n     *              within  类级别切入点\r\n     *                  within(com.service.*)\r\n     *              @annotation 基于注解的切入点\r\n     *                  @annotation(com.annotations.xxx)\r\n     */\r\n    @Around(\"@annotation(com.annotations.MyAdvice)\")\r\n    public Object aroundAdvice(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\r\n        System.out.println(\"=========自定义注解环绕前置操作=========\");\r\n        System.out.println(\"当前执行类:\" + proceedingJoinPoint.getTarget());\r\n        System.out.println(\"方法名:\" + proceedingJoinPoint.getSignature().getName());\r\n        // 放行目标方法\r\n        Object proceed = proceedingJoinPoint.proceed();\r\n        System.out.println(\"=========自定义注解环绕后置操作=========\");\r\n        return proceed;\r\n    }\r\n}\r\n```\r\n\r\n# 4、自定义基于注解的切入点\r\n\r\n```java\r\npackage com.annotations;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n// 指定运行时生效\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.METHOD)\r\npublic @interface MyAdvice {\r\n}\r\n```\r\n\r\n# 5、编写测试类测试\r\n\r\n```java\r\npackage com;\r\n\r\nimport com.service.UserService;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\npublic class UserServiceTests {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @Test\r\n    public void testSave(){\r\n        userService.save(\"111\");\r\n    }\r\n\r\n    @Test\r\n    public void testDelete(){\r\n        userService.delete(1);\r\n    }\r\n\r\n    @Test\r\n    public void testFind(){\r\n        String name = userService.find(\"张三\");\r\n        System.out.println(name);\r\n    }\r\n}\r\n```', '2022-08-11 14:11:29', 'https://img1.baidu.com/it/u=2767945580,731295797&fm=253&fmt=auto&app=138&f=JPEG?w=667&h=500', '原创', '', '', '', 'Spring Boot使用AOP切面', '2022-08-11 14:16:51', '12', '140', '1', '引入AOP依赖、创建Service层、创建AOP配置类、自定义基于注解的切入点、编写测试类测试');
INSERT INTO `t_detail` VALUES ('232', '', '', '# 1、引入thymeleaf依赖\r\n\r\n```xml\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n```\r\n\r\n# 2、创建控制器\r\n\r\n```java\r\npackage com.controller;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n@Controller\r\npublic class DemoController {\r\n    private static final Logger logger = LoggerFactory.getLogger(DemoController.class);\r\n\r\n    @RequestMapping(\"/demo\")\r\n    public String demo(){\r\n        logger.info(\"demo ok\");\r\n        return \"demo\";\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npackage com.controller;\r\n\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\n@RequestMapping(\"/demo2\")\r\npublic class Demo2Controller {\r\n\r\n    @RequestMapping(\"/233\")\r\n    public String demo(){\r\n        return \"233333\";\r\n    }\r\n}\r\n```\r\n\r\n# 3、自定义拦截器\r\n\r\n```java\r\npackage com.interceptors;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.web.servlet.HandlerInterceptor;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n/**\r\n * 自定义拦截器\r\n */\r\npublic class MyInterceptor1 implements HandlerInterceptor {\r\n    private static final Logger logger = LoggerFactory.getLogger(MyInterceptor1.class);\r\n\r\n    // preHandle最先执行\r\n    // handler:当前请求的控制器的方法对象\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n        logger.info(\"===========1===========\");\r\n        // 如果不放行，页面跳转 response重定向\r\n        // response.sendRedirect(\"/error\");\r\n        return true; //true放行，false中断\r\n    }\r\n\r\n    // Controller执行结束后返回到postHandle\r\n    // handler:当前请求的控制器的方法对象\r\n    // modelAndView:模型和视图\r\n    @Override\r\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\r\n        logger.info(\"===========2===========\");\r\n        //logger.info(\"view:{}\",modelAndView.getViewName());\r\n    }\r\n\r\n    // handler:当前请求的控制器的方法对象\r\n    // ex:如果出现异常时的异常对象\r\n    // afterCompletion方法总是执行。请求正确、异常都会执行\r\n    @Override\r\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\r\n        logger.info(\"===========3===========\");\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npackage com.interceptors;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.web.servlet.HandlerInterceptor;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n/**\r\n * 自定义拦截器2\r\n */\r\npublic class MyInterceptor2 implements HandlerInterceptor {\r\n    private static final Logger logger = LoggerFactory.getLogger(MyInterceptor2.class);\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n        logger.info(\"===========4===========\");\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\r\n        logger.info(\"===========5===========\");\r\n    }\r\n\r\n    @Override\r\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\r\n        logger.info(\"===========6===========\");\r\n    }\r\n}\r\n```\r\n\r\n# 4、编写拦截器配置类\r\n\r\n```java\r\npackage com.config;\r\n\r\n\r\nimport com.interceptors.MyInterceptor1;\r\nimport com.interceptors.MyInterceptor2;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\npublic class MvcConfig implements WebMvcConfigurer {\r\n\r\n    /**\r\n     * 配置拦截器\r\n     * 多个拦截器的执行顺序\r\n     * @param registry\r\n     */\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new MyInterceptor1())\r\n                .addPathPatterns(\"/**\") //拦截所有\r\n                .excludePathPatterns(\"/demo2/**\") //排除路径\r\n                .order(1);  // 指定拦截顺序，数字相同按照配置顺序\r\n        registry.addInterceptor(new MyInterceptor2())\r\n                .addPathPatterns(\"/**\")\r\n                .excludePathPatterns(\"/demo2/**\")\r\n                .order(2);\r\n    }\r\n}\r\n```\r\n\r\n# 5、多个拦截器的执行顺序\r\n\r\n```bash\r\n# 通过 registry.order(int) 指定顺序\r\ncom.interceptors.MyInterceptor1          : ===========1===========\r\ncom.interceptors.MyInterceptor2          : ===========4===========\r\ncom.controller.DemoController            : demo ok\r\ncom.interceptors.MyInterceptor2          : ===========5===========\r\ncom.interceptors.MyInterceptor1          : ===========2===========\r\ncom.interceptors.MyInterceptor2          : ===========6===========\r\ncom.interceptors.MyInterceptor1          : ===========3===========\r\n```', '2022-08-11 17:08:28', 'https://img0.baidu.com/it/u=3699658583,2347047064&fm=253&fmt=auto&app=138&f=JPEG?w=1155&h=500', '原创', '', '', '', 'Spring Boot使用Interceptor拦截器', '2022-08-11 17:13:28', '9', '140', '1', '引入thymeleaf依赖、创建控制器、自定义拦截器、编写拦截器配置类、多个拦截器的执行顺序');
INSERT INTO `t_detail` VALUES ('233', '', '', '# 1、Spring Boot集成Thymeleaf\r\n\r\n## 1.1 引入依赖\r\n\r\n```xml\r\n<!--thymeleaf依赖-->\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 1.2 application配置文件\r\n\r\n```bash\r\n# 配置使用thymeleaf (默认路径就是templates，也可以不配置)\r\nspring:\r\n  thymeleaf:\r\n    prefix:  classpath:/templates/\r\n    suffix: .html\r\n    cache: false     # 缓存 开发环境建议关闭\r\n```\r\n\r\n# 2、html页面\r\n\r\n## 2.1 命名空间设置\r\n\r\n```html\r\n<html lang=\"en\" xmlns:th=\"http://www.themeleaf.org\">\r\n```\r\n\r\n## 2.2 首页\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.themeleaf.org\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>springboot thymeleaf使用</title>\r\n</head>\r\n<body>\r\n<h1>测试Thymeleaf</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\n## 2.3 测试页\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.themeleaf.org\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>测试thymeleaf语法</title>\r\n</head>\r\n<body>\r\n<h1>Thymeleaf语法测试</h1>\r\n\r\n<!--  th:text=${属性名} 直接把数据渲染成文本 -->\r\n<!--  th:utext=${属性名} 把数据解析成html再渲染 -->\r\n<h4>姓名: <span th:text=\"${name}\"></span></h4>\r\n<h4>年龄: <span th:text=\"${age}\"></span></h4>\r\n<h4>博客地址: <span th:utext=\"${content}\"></span></h4>\r\n\r\n<input type=\"text\" name=\"username\" th:value=\"${name}\">\r\n<input type=\"text\" name=\"age\" th:value=\"${age}\">\r\n\r\n<!--  格式化日期:${#dates.format(格式化值,\'格式\')}  -->\r\n<h4>获取对象类型数据:</h4>\r\n<h5>ID: <span th:text=\"${user.id}\"></span></h5>\r\n<h5>姓名: <span th:text=\"${user.name}\"></span></h5>\r\n<h5>薪水: <span th:text=\"${user.salary}\"></span></h5>\r\n<h5>生日: <span th:text=\"${#dates.format(user.birthday,\'yyyy-MM-dd HH:mm:ss\')}\"></span></h5>\r\n\r\n<!--    遍历数据:th:each=\"变量(元素),变量(状态):${集合}\"    -->\r\n<h4>获取集合类型数据:</h4>\r\n<ul>\r\n    <li th:each=\"user,state:${users}\">\r\n        state count: <span th:text=\"${state.count}\"></span>\r\n        <br/>\r\n        state odd: <span th:text=\"${state.odd}\"></span>\r\n        <br/>\r\n        state even: <span th:text=\"${state.even}\"></span>\r\n        <br/>\r\n        state size: <span th:text=\"${state.size}\"></span>\r\n        <br/>\r\n        id: <span th:text=\"${user.id}\"></span>\r\n        <br/>\r\n        name: <span th:text=\"${user.name}\"></span>\r\n        <br/>\r\n        salary: <span th:text=\"${user.salary}\"></span>\r\n        <br/>\r\n        birthday: <span th:text=\"${#dates.format(user.birthday,\'yyyy年MM月dd日\')}\"></span>\r\n    </li>\r\n</ul>\r\n\r\n<!--  th:if=${条件}  -->\r\n<h4>有条件的展示数据:</h4>\r\n<div style=\"width: 100px;height: 100px;background: rebeccapurple;\" th:if=\"${age>23}\">\r\n    年龄大于23\r\n</div>\r\n<div style=\"width: 100px;height: 100px;background: green;\" th:if=\"${age<=23}\">\r\n    年龄小于等于23\r\n</div>\r\n\r\n<h4>获取Session数据</h4>\r\n<h5><span th:text=\"${session.username}\"></span></h5>\r\n\r\n<h4>获取css和js文件</h4>\r\n<link rel=\"stylesheet\" th:href=\"@{/demo.css}\">\r\n<script th:src=\"@{/demo.js}\"></script>\r\n\r\n<h4>传递数据</h4>\r\n<form method=\"post\" th:action=\"@{/admin/userinfoModify/avatar/{id}(id=${user.id})}\"></form>\r\n\r\n<!--内联表达式[[thymeleaf]]-->\r\n</body>\r\n</html>\r\n```\r\n\r\n# 3、控制器\r\n\r\n## 3.1 主页接口\r\n\r\n```java\r\npackage com.controller;\r\n\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\n\r\n@Controller\r\n@Api(tags = \"主页接口\")\r\npublic class HelloController {\r\n\r\n    @GetMapping(\"/\")\r\n    @ApiOperation(value = \"返回主页\")\r\n    public String index(){\r\n        return \"index\";\r\n    }\r\n}\r\n```\r\n\r\n## 3.2 测试页接口\r\n\r\n```java\r\npackage com.controller;\r\n\r\nimport com.entity.User;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n@Controller\r\n@Api(tags = \"Thymeleaf测试接口\")\r\npublic class DemoController {\r\n\r\n    /**\r\n     * forward跳转：request、mode作用域\r\n     * redirect跳转：session作用域\r\n     */\r\n    @GetMapping(\"/demo\")\r\n    @ApiOperation(value = \"传递数据\",notes = \"<span style=\'color:red;\'>描述：</span>&nbsp;&nbsp;单个、多个数据、对象、集合、Session传递\")\r\n    public String demo(HttpServletRequest request, Model model, HttpSession session) {\r\n        // 传递单个数据\r\n        String name = \"zm\";\r\n        Integer age = 21;\r\n        String content = \"<a href=\'http://121.37.208.86/\' target=\'_blank\'>博客网页</a>\";\r\n\r\n        request.setAttribute(\"name\", name);\r\n        model.addAttribute(\"age\", age);\r\n        model.addAttribute(\"content\", content);\r\n\r\n        // 传递对象类型数据\r\n        User user = new User(21, \"zm\", 6666.66, new Date());\r\n        request.setAttribute(\"user\", user);\r\n\r\n\r\n        // 传递集合类型数据\r\n        List<User> users = new ArrayList<>();\r\n        users.add(new User(22, \"张三\", 233.3, new Date()));\r\n        users.add(new User(23, \"李四\", 244.4, new Date()));\r\n        users.add(new User(24, \"王五\", 255.5, new Date()));\r\n        model.addAttribute(\"users\", users);\r\n\r\n        // 获取Session数据 session.key\r\n        // 获取application数据 application.key\r\n        session.setAttribute(\"username\",\"wangbadan\");\r\n        return \"demo\";\r\n    }\r\n}\r\n```', '2022-08-12 18:55:10', 'https://img2.baidu.com/it/u=884414995,1176971932&fm=253&fmt=auto&app=138&f=JPEG?w=711&h=396', '原创', '', '', '', 'Thymeleaf基础语法', '2022-08-14 16:29:07', '32', '141', '1', 'Spring Boot集成Thymeleaf、application配置文件、命名空间、基础语法');
INSERT INTO `t_detail` VALUES ('248', '', '', '# 变量\r\n## 关于变量\r\n### 什么是变量？\r\n```java\r\n	内存中存储数据最基本的单元\r\n	存储数据的盒子	盒子的大小由数据类型决定\r\n```\r\n### 变量三要素\r\n```java\r\n数据类型	名字	保存的值\r\n```\r\n### 变量怎么声明/定义，语法格式是什么？\r\n```java\r\n数据类型 变量名；\r\n		eg：\r\n			int nianLing; \r\npublic class VarTest02{\r\n	public static void main(String[] args){\r\n	int nianLing;\r\n	//变量必须先声明  再赋值	给变量赋值用=号\r\n	//=号右边先执行	赋值完后给左边的变量  \r\n\r\n	//等号右边只能是“字面量”\r\n	nianLing=45;\r\n	System.out.println(nianLing);\r\n\r\n	//变量：可以变化的量\r\n	//重新赋值\r\n	nianLing=84;\r\n	System.out.println(nianLing);\r\n	\r\n	//变量可以声明的同时赋值\r\n		int weight=80;\r\n	}\r\n} \r\n\r\n```\r\n### 变量的分类  作用域\r\n```java\r\n1、变量根据出现的位置进行划分\r\n	在方法体当中声明的变量：局部变量\r\n	在方法体之外，类体内声明的变量：成员变量\r\n2、局部变量只在方法体当中有效  方法体执行结束  该变量内存就被释放	 \r\n\r\n3、变量的作用域：变量的有效范围\r\n4、一句话：出了大括号就不认识了\r\n	换个方法体就不认了\r\n\r\n	不在同一个域的局部变量名可以相同\r\n\r\n3、Java中有就近原则  哪个离输出近就访问哪个\r\n	其他语言也有就近原则\r\n\r\n```\r\n## 关于字面量\r\n```java\r\n软件在处理数据之前要先表示数据\r\n	Java中有一个概念：字面量\r\n/*\r\n在Java语言中”数据“被称为”字面量“\r\n		10\r\n		1.23\r\n		true\r\n		‘a’\r\n		”abc“\r\n		以上这些数据都被叫做字面量\r\n\r\n		字面量有很多种\r\n			整数型字面量：1 2 23 1 -411 \r\n			浮点型字面量：1.52  1.58.....\r\n			布尔型字面量：true、false  只有这俩\r\n			字符型字面量：‘a’、‘n’\r\n			字符串型字面量：”abc“\r\n\r\n字符型和字符串型都是描述现实世界中的文字\r\n		字符型只能使用单引号‘’\r\n		字符串型只能使用双引号”“\r\n	\r\n	字符型一定是单个字符才能成为”字符型“\r\n\r\n	在语法级别上怎么区分字符型和字符串\r\n		主要看是双引号还是单引号\r\n		单引号一定是字符型\r\n		双引号一定是字符串型\r\n*/\r\n\r\n```\r\n', '2022-08-15 18:41:08', 'https://tse2-mm.cn.bing.net/th/id/OIP-C.mevZbIlLd8lUQeCnR9GvOQAAAA?w=259&h=164&c=7&r=0&o=5&dpr=1.25&pid=1.7', '', '', '', '', 'JavaSE基础笔记（3）', '2022-08-15 18:41:08', '11', '236', '2', '变量与字面量');
INSERT INTO `t_detail` VALUES ('249', '', '', '# 1、RESTful常用请求方式\r\n\r\n- **delete 删除**\r\n	- /users/001	# 删除某个用户\r\n- **get 查询**\r\n	- /users	# 查询用户信息列表\r\n	- /users/001 	# 查询某个用户\r\n- **post 添加**\r\n	- /users	# 添加用户\r\n- **put 修改(全部字段)**\r\n	- /users/001	# 更新某个用户\r\n- **patch 修改(部分字段)**\r\n	- /users/001	# 更新某个用户的部分属性\r\n\r\n# 2、设计风格原则\r\n\r\n1. **使用名词而不是动词**\r\n\r\n2. **Get方式不应该涉及状态改变**\r\n\r\n3. **使用复数名词**\r\n\r\n4. **使用子资源表达关系**\r\n\r\n5. **使用Http头声明序列化格式**\r\n\r\n6. **为集合提供过滤 排序 选择和分页等功能**\r\n\r\n7. **版本化API**\r\n\r\n8. **使用Http状态码处理错误**\r\n\r\n# 3、相关代码实现\r\n\r\n\r\n> **entity实体类跳过**\r\n\r\n\r\n```java\r\npackage com.controller.v1;\r\n\r\nimport com.entity.Pet;\r\nimport com.entity.User;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n@RestController // 返回数据为json\r\n@RequestMapping(\"/v1/users\") // 使用复数名词\r\npublic class UserController {\r\n    private static final Logger logger = LoggerFactory.getLogger(UserController.class);\r\n\r\n    // ResponseEntity : springMVC封装的一个专业于RESTful的响应类，可以提供状态码，自定义响应头信息\r\n    // HttpStatus : springMVC封装的一个枚举类，都是网络状态码\r\n\r\n    /**\r\n     * 查询某个用户\r\n     *\r\n     * @param id\r\n     * @return\r\n     */\r\n    @GetMapping(\"/{id}\")\r\n    //@PathVariable: 获取url值\r\n    public ResponseEntity<User> user(@PathVariable(\"id\") Integer id) {\r\n        logger.info(\"id:{}\", id);\r\n        User user = new User(id, \"张三\", 2333.33, new Date());\r\n        return new ResponseEntity<>(user, HttpStatus.OK);\r\n    }\r\n\r\n    /**\r\n     * 查询所有用户\r\n     *\r\n     * @return\r\n     */\r\n    @GetMapping\r\n    public ResponseEntity<List<User>> users() {\r\n        List<User> users = new ArrayList<>();\r\n        users.add(new User(1, \"李四\", 2222.22, new Date()));\r\n        users.add(new User(2, \"王五\", 2000.00, new Date()));\r\n        return new ResponseEntity<>(users, HttpStatus.OK);\r\n    }\r\n\r\n    /**\r\n     * 更新指定用户\r\n     *\r\n     * @param id\r\n     * @param user\r\n     * @return\r\n     */\r\n    @PutMapping(\"/{id}\")\r\n    //@RequestBody: 获取前端传递的JSON数据，以对象接收\r\n    public ResponseEntity<Void> update(@PathVariable(\"id\") Integer id, @RequestBody User user) {\r\n        logger.info(\"id:{}\", id);\r\n        logger.info(\"name:{} salary:{} birthday:{}\", user.getName(), user.getSalary(), user.getBirthday());\r\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 表示操作正常，不返回数据\r\n    }\r\n\r\n    /**\r\n     * 删除指定用户\r\n     *\r\n     * @param id\r\n     * @return\r\n     */\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> delete(@PathVariable(\"id\") Integer id) {\r\n        logger.info(\"id:{}\", id);\r\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\r\n    }\r\n\r\n    /**\r\n     * 查询指定用户的所有宠物\r\n     * @param id\r\n     * @return\r\n     */\r\n    @GetMapping(\"/{id}/pets\")\r\n    public ResponseEntity<List<Pet>> pets(@PathVariable(\"id\") Integer id) {\r\n        logger.info(\"id:{}\",id);\r\n        List<Pet> pets = Arrays.asList(new Pet(1,\"鳖\",250),new Pet(2,\"猴子\",233));\r\n        return new ResponseEntity<>(pets,HttpStatus.OK);\r\n    }\r\n\r\n    /**\r\n     * 查询指定用户的指定宠物\r\n     * @param id\r\n     * @param pid\r\n     * @return\r\n     */\r\n    @GetMapping(\"/{id}/pets/{pid}\")\r\n    public ResponseEntity<Pet> pet(@PathVariable(\"id\")Integer id,@PathVariable(\"pid\")Integer pid){\r\n        logger.info(\"id:{}\",id);\r\n        Pet pet = new Pet(1,\"王八蛋\",22);\r\n        return new ResponseEntity<>(pet,HttpStatus.OK);\r\n    }\r\n}\r\n```', '2022-08-16 17:01:15', 'https://img2.baidu.com/it/u=344193787,2128070702&fm=253&fmt=auto&app=138&f=GIF?w=672&h=321', '原创', '', '', '', 'RESTful接口规范', '2022-08-16 21:45:10', '20', '140', '1', 'RESTful常用请求方式、设计风格原则、相关代码实现');
INSERT INTO `t_detail` VALUES ('250', '', '', '# if语句\r\n## if语句语法格式及执行原理\r\n### 第一种\r\n```java\r\nif（布尔表达式）{\r\n					Java语句;\r\n					java语句;\r\n				}\r\n		这里的大括号{}叫做一个分支\r\n执行原理：\r\n	如果布尔表达式的结果为true，则执行大括号里的程序\r\n	否则大括号中代码不执行\r\n		\r\n```\r\n### 第二种\r\n```java\r\nif(布尔表达式){\r\n				java语句;	分支1\r\n			}else{\r\n				Java语句;	分支2\r\n执行原理：如果布尔表达式结果为true，执行分支1\r\n		如果布尔表达式结果为false，执行分支2\r\n		以上语句可以保证一定有一个语句执行\r\n```\r\n### 第三种\r\n```java\r\nif（布尔表达式1）{\r\n				Java语句;\r\n			}else if（布尔表达式2）{\r\n				Java语句;			\r\n			}else if（布尔表达式3）{\r\n				Java语句;\r\n			}else if（布尔表达式4）{\r\n				Java语句;\r\n			}....\r\n执行原理：\r\n	先判断“布尔表达式1”，如果“布尔表达式1”为true，则执行分支1\r\n	然后if语句结束\r\n	当“布尔表达式1”结果为false，会继续判断“布尔表达式2”结果\r\n	若表达式2结果为true  则执行分支2\r\n	然后if语句结束\r\n	从上往下依次判断  主要看第一个true发生在哪个分支上\r\n注意：按此种写法，若所有if语句结果都为false，则该段代码都不会执行\r\n```\r\n### 第四种\r\n```java\r\nif（布尔表达式1）{\r\n				Java语句;\r\n			}else if（布尔表达式2）{\r\n				Java语句;			\r\n			}else if（布尔表达式3）{\r\n				Java语句;\r\n			}else if（布尔表达式4）{\r\n				Java语句;\r\n			}else{\r\n				Java语句;\r\n			}			比第三种多了一个else语句\r\n执行原理：以上条件没有一个成立的话  执行最后一个else分支\r\n```\r\n### 注意事项\r\n```java\r\n1、1个if语句在任何情况下  只能有一个分支执行\r\n	只要有一个分支执行了 整个if语句就结束了\r\n2、以上4种语法机制中，凡是带有else分支的，一定会保证有一个分支执行\r\n	上面第一种和第三种没有else分支  这样可能导致一个分支都没执行\r\n\r\n3、控制语句之间可以嵌套,分析代码的时候先分析最外层，再逐层向内分析\r\n\r\n\r\n```', '2022-08-16 21:04:13', 'https://tse2-mm.cn.bing.net/th/id/OIP-C.mevZbIlLd8lUQeCnR9GvOQAAAA?w=259&h=164&c=7&r=0&o=5&dpr=1.25&pid=1.7', '', '', '', '', 'JavaSE基础笔记（4）', '2022-08-16 21:04:13', '11', '236', '2', 'if语句');
INSERT INTO `t_detail` VALUES ('251', '', '', '# 1、前后端分离自定义异常处理\r\n\r\n```java\r\npackage com.controller;\r\n\r\nimport com.exception.IllegalExceptionHandler;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController(\"/hellos\")\r\npublic class HelloController {\r\n\r\n    @GetMapping(\"/hello\")\r\n    public ResponseEntity<String> hello(){\r\n        int i = 1/0; // 由控制器异常监听处理\r\n        return new ResponseEntity<>(\"hello\", HttpStatus.OK);\r\n    }\r\n\r\n    @GetMapping(\"/hello/{id}\")\r\n    public ResponseEntity<String> hello(@PathVariable(\"id\")Integer id){\r\n        if(id < 0) throw new IllegalExceptionHandler(\"非法数字\");\r\n        return new ResponseEntity<>(\"hello\",HttpStatus.OK);\r\n    }\r\n}\r\n```\r\n\r\n# 2、自定义异常类\r\n\r\n```java\r\npackage com.exception;\r\n\r\npublic class IllegalExceptionHandler extends RuntimeException{\r\n\r\n    public IllegalExceptionHandler(String message) {\r\n        super(message);\r\n    }\r\n}\r\n```\r\n\r\n# 3、自定义Handler类\r\n\r\n```java\r\npackage com.handler;\r\n\r\nimport com.exception.IllegalExceptionHandler;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.ControllerAdvice;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\n\r\n@ControllerAdvice // 监听控制器异常\r\npublic class CustomExceptionHandler {\r\n\r\n    @ExceptionHandler(Exception.class) //处理全部异常\r\n    public ResponseEntity<String> exceptionHandler(Exception e){\r\n        System.out.println(\"自定义异常处理\");\r\n        return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR); // 服务器内部错误，500\r\n    }\r\n\r\n    @ExceptionHandler(IllegalExceptionHandler.class)\r\n    public ResponseEntity<String> illegalExceptionHandler(Exception e){\r\n        System.out.println(\"非法数字异常处理\");\r\n        return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\r\n```', '2022-08-17 20:11:13', 'https://img0.baidu.com/it/u=1975525739,1797707483&fm=253&fmt=auto&app=138&f=JPEG?w=539&h=500', '原创', '', '', '', 'Spring Boot前后端分离异常处理', '2022-08-17 20:11:51', '2', '140', '1', '前后端分离自定义异常处理、自定义异常类、自定义Handler类');

-- ----------------------------
-- Table structure for `t_detail_tags`
-- ----------------------------
DROP TABLE IF EXISTS `t_detail_tags`;
CREATE TABLE `t_detail_tags` (
  `details_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  KEY `FKdjn4j7v88jq7m8htbhiaarfni` (`tags_id`),
  KEY `FK4gctocyknrewcjs5vgvlgscpr` (`details_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_detail_tags
-- ----------------------------
INSERT INTO `t_detail_tags` VALUES ('84', '54');
INSERT INTO `t_detail_tags` VALUES ('87', '53');
INSERT INTO `t_detail_tags` VALUES ('90', '54');
INSERT INTO `t_detail_tags` VALUES ('91', '54');
INSERT INTO `t_detail_tags` VALUES ('93', '54');
INSERT INTO `t_detail_tags` VALUES ('176', '178');
INSERT INTO `t_detail_tags` VALUES ('176', '177');
INSERT INTO `t_detail_tags` VALUES ('174', '175');
INSERT INTO `t_detail_tags` VALUES ('174', '173');
INSERT INTO `t_detail_tags` VALUES ('206', '205');
INSERT INTO `t_detail_tags` VALUES ('206', '204');
INSERT INTO `t_detail_tags` VALUES ('214', '213');
INSERT INTO `t_detail_tags` VALUES ('214', '212');
INSERT INTO `t_detail_tags` VALUES ('214', '158');
INSERT INTO `t_detail_tags` VALUES ('216', '215');
INSERT INTO `t_detail_tags` VALUES ('219', '217');
INSERT INTO `t_detail_tags` VALUES ('219', '215');
INSERT INTO `t_detail_tags` VALUES ('222', '217');
INSERT INTO `t_detail_tags` VALUES ('222', '212');
INSERT INTO `t_detail_tags` VALUES ('222', '158');
INSERT INTO `t_detail_tags` VALUES ('223', '212');
INSERT INTO `t_detail_tags` VALUES ('225', '212');
INSERT INTO `t_detail_tags` VALUES ('225', '158');
INSERT INTO `t_detail_tags` VALUES ('226', '215');
INSERT INTO `t_detail_tags` VALUES ('230', '217');
INSERT INTO `t_detail_tags` VALUES ('230', '177');
INSERT INTO `t_detail_tags` VALUES ('230', '173');
INSERT INTO `t_detail_tags` VALUES ('231', '212');
INSERT INTO `t_detail_tags` VALUES ('231', '158');
INSERT INTO `t_detail_tags` VALUES ('232', '212');
INSERT INTO `t_detail_tags` VALUES ('232', '158');
INSERT INTO `t_detail_tags` VALUES ('233', '234');
INSERT INTO `t_detail_tags` VALUES ('233', '212');
INSERT INTO `t_detail_tags` VALUES ('233', '158');
INSERT INTO `t_detail_tags` VALUES ('245', '212');
INSERT INTO `t_detail_tags` VALUES ('248', '212');
INSERT INTO `t_detail_tags` VALUES ('249', '212');
INSERT INTO `t_detail_tags` VALUES ('249', '178');
INSERT INTO `t_detail_tags` VALUES ('249', '158');
INSERT INTO `t_detail_tags` VALUES ('250', '212');
INSERT INTO `t_detail_tags` VALUES ('251', '212');
INSERT INTO `t_detail_tags` VALUES ('251', '158');

-- ----------------------------
-- Table structure for `t_leaving_message`
-- ----------------------------
DROP TABLE IF EXISTS `t_leaving_message`;
CREATE TABLE `t_leaving_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `mail` varchar(255) DEFAULT NULL,
  `message` longtext,
  `ct` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=222 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_leaving_message
-- ----------------------------
INSERT INTO `t_leaving_message` VALUES ('196', '123123', '1456133139@qq.com', '啊', '2021-03-22 16:07:02');
INSERT INTO `t_leaving_message` VALUES ('201', '1', '123@qq.com', '1', '2022-04-30 13:42:58');
INSERT INTO `t_leaving_message` VALUES ('203', '老八', '123@123', '老八秘制小汉堡', '2022-06-29 20:44:37');
INSERT INTO `t_leaving_message` VALUES ('208', '233', '13123@113', '2333', '2022-08-04 22:16:30');
INSERT INTO `t_leaving_message` VALUES ('209', '1', '1@1', '1', '2022-08-04 22:16:40');
INSERT INTO `t_leaving_message` VALUES ('210', '嗨害嗨', '1@1', '来啦', '2022-08-04 22:17:03');
INSERT INTO `t_leaving_message` VALUES ('211', '蔡徐坤', '1@1', '你干嘛', '2022-08-04 22:17:38');
INSERT INTO `t_leaving_message` VALUES ('221', '田所浩二', '1145141919810@homo.com', '快来撅我罢 (迫切', '2022-08-06 21:23:20');

-- ----------------------------
-- Table structure for `t_tag`
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES ('158', 'Spring Boot');
INSERT INTO `t_tag` VALUES ('173', '正则表达式');
INSERT INTO `t_tag` VALUES ('175', 'JavaScript');
INSERT INTO `t_tag` VALUES ('177', 'Nginx');
INSERT INTO `t_tag` VALUES ('178', '常用API');
INSERT INTO `t_tag` VALUES ('204', 'Git');
INSERT INTO `t_tag` VALUES ('205', '版本控制工具');
INSERT INTO `t_tag` VALUES ('212', 'Java');
INSERT INTO `t_tag` VALUES ('213', 'Swagger');
INSERT INTO `t_tag` VALUES ('215', 'MySQL');
INSERT INTO `t_tag` VALUES ('217', 'Linux');
INSERT INTO `t_tag` VALUES ('234', 'Thymeleaf');

-- ----------------------------
-- Table structure for `t_type`
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type` (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES ('140', '后端开发');
INSERT INTO `t_type` VALUES ('141', '前端开发');
INSERT INTO `t_type` VALUES ('142', '数据库相关');
INSERT INTO `t_type` VALUES ('218', '服务器相关');
INSERT INTO `t_type` VALUES ('220', '运维相关');
INSERT INTO `t_type` VALUES ('236', '语言基础');

-- ----------------------------
-- Table structure for `t_user`
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES ('1', 'https://img0.baidu.com/it/u=2091874135,3530376817&fm=253&fmt=auto&app=138&f=JPEG?w=400&h=400', '2020-07-05 20:04:34', '1456133139@qq.com', 'Zm-Mmm', '5f93f983524def3dca464469d2cf9f3e', '1', '2022-08-14 14:04:35', '1456133139');
INSERT INTO `t_user` VALUES ('2', 'https://tse4-mm.cn.bing.net/th/id/OIP-C.8PeAI7IEDhyg9O6scRH5aAAAAA?w=190&h=209&c=7&r=0&o=5&dpr=1.25&pid=1.7', '2022-08-07 21:03:30', '1301770062@qq.com', 'StayNaughty', 'ef3a8c20cf52f81082003800e2495039', '1', '2022-08-07 21:03:56', 'zxc52959088');
